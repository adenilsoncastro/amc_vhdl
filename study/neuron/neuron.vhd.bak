 library ieee;
 use ieee.std_logic_1164.all;
 
 library ieee_proposed;
 use ieee_proposed.fixed_pkg.all;
 
 library work;
 use work.all;
 
 entity neuron is
	generic(
		g_addr		: std_logic_vector(18 downto 0) := "0000000000000000000";
		g_bits_data	: natural := 16;
		g_bits_ctrl	: natural := 4);
	
	port(
		i_clk			: in std_logic;
		i_enable		: in std_logic;
		i_ctrl		: in std_logic_vector((g_bits_ctrl-1) downto 0);
		i_fxp_data	: in std_logic_vector((g_bits_data-1) downto 0);
		
		o_fxp_data	: out std_logic_vector((g_bits_data -1) downto 0));
 end neuron;
  
 architecture rtl of neuron is
	
	constant c_bias			: std_logic_vector(g_bits_data-1 downto 0) 	:= "0000000000100110";
	signal r_wr					: std_logic							 					:= '0';
	signal r_addr				: std_logic_vector(3 downto 0) 					:= "0000";
	signal r_data_in_ram		: std_logic_vector(g_bits_data-1 downto 0)	:= (others => '0');
	signal r_data_out_ram	: std_logic_vector(g_bits_data-1 downto 0)	:= (others => '0');

	component ram is
		generic(
			g_width 		: natural := 16;
			g_depth 		: natural := 10;
			g_addr_bits : natural := 4);
		port(
			i_clk			: in std_logic;
			i_wr			: in std_logic;
			i_addr		: in std_logic_vector(g_addr_bits-1 downto 0);
			i_data		: in std_logic_vector(g_width-1 downto 0);
			o_data		: out std_logic_vector(g_width-1 downto 0));
	end component;
	 
 begin
 
	ram_n1 :  ram port map(i_clk, r_wr, r_addr, r_data_in_ram, r_data_out_ram);
	o_fxp_data <= r_data_out_ram;
  
 end rtl;