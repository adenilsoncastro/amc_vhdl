-- Copyright (C) 2020  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.
--B1_r_fifo_count[3] is fifo:fifo_rx|r_fifo_count[3]
--register power-up is low

B1_r_fifo_count[3] = DFFEAS(B1L20, i_clk,  ,  , !B1L62,  ,  , !i_rst_sync,  );


--B1_r_fifo_count[1] is fifo:fifo_rx|r_fifo_count[1]
--register power-up is low

B1_r_fifo_count[1] = DFFEAS(B1L14, i_clk,  ,  , !B1L62,  ,  , !i_rst_sync,  );


--B1_r_fifo_count[0] is fifo:fifo_rx|r_fifo_count[0]
--register power-up is low

B1_r_fifo_count[0] = DFFEAS(B1L11, i_clk,  ,  , !B1L62,  ,  , !i_rst_sync,  );


--B1_r_fifo_count[2] is fifo:fifo_rx|r_fifo_count[2]
--register power-up is low

B1_r_fifo_count[2] = DFFEAS(B1L17, i_clk,  ,  , !B1L62,  ,  , !i_rst_sync,  );


--B1_r_fifo_count[4] is fifo:fifo_rx|r_fifo_count[4]
--register power-up is low

B1_r_fifo_count[4] = DFFEAS(B1L23, i_clk,  ,  , !B1L62,  ,  , !i_rst_sync,  );


--F1_ram_block1a0 is fifo:fifo_rx|altsyncram:r_fifo_data_rtl_0|altsyncram_noh1:auto_generated|ram_block1a0
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a0_PORT_A_data_in = r_fifo_rx_wr_data[0];
F1_ram_block1a0_PORT_A_data_in_reg = DFFE(F1_ram_block1a0_PORT_A_data_in, F1_ram_block1a0_clock_0, , , );
F1_ram_block1a0_PORT_A_address = BUS(B1_r_wr_index[0], B1_r_wr_index[1], B1_r_wr_index[2], B1_r_wr_index[3]);
F1_ram_block1a0_PORT_A_address_reg = DFFE(F1_ram_block1a0_PORT_A_address, F1_ram_block1a0_clock_0, , , );
F1_ram_block1a0_PORT_B_address = BUS(B1L68, B1L70, B1L71, B1L73);
F1_ram_block1a0_PORT_B_address_reg = DFFE(F1_ram_block1a0_PORT_B_address, F1_ram_block1a0_clock_0, , , );
F1_ram_block1a0_PORT_A_write_enable = B1L62;
F1_ram_block1a0_PORT_A_write_enable_reg = DFFE(F1_ram_block1a0_PORT_A_write_enable, F1_ram_block1a0_clock_0, , , );
F1_ram_block1a0_PORT_B_read_enable = VCC;
F1_ram_block1a0_PORT_B_read_enable_reg = DFFE(F1_ram_block1a0_PORT_B_read_enable, F1_ram_block1a0_clock_0, , , );
F1_ram_block1a0_clock_0 = i_clk;
F1_ram_block1a0_PORT_B_data_out = MEMORY(F1_ram_block1a0_PORT_A_data_in_reg, , F1_ram_block1a0_PORT_A_address_reg, F1_ram_block1a0_PORT_B_address_reg, F1_ram_block1a0_PORT_A_write_enable_reg, , , F1_ram_block1a0_PORT_B_read_enable_reg, , , F1_ram_block1a0_clock_0, , , , , , , );
F1_ram_block1a0 = F1_ram_block1a0_PORT_B_data_out[0];


--F1_ram_block1a1 is fifo:fifo_rx|altsyncram:r_fifo_data_rtl_0|altsyncram_noh1:auto_generated|ram_block1a1
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a1_PORT_A_data_in = r_fifo_rx_wr_data[1];
F1_ram_block1a1_PORT_A_data_in_reg = DFFE(F1_ram_block1a1_PORT_A_data_in, F1_ram_block1a1_clock_0, , , );
F1_ram_block1a1_PORT_A_address = BUS(B1_r_wr_index[0], B1_r_wr_index[1], B1_r_wr_index[2], B1_r_wr_index[3]);
F1_ram_block1a1_PORT_A_address_reg = DFFE(F1_ram_block1a1_PORT_A_address, F1_ram_block1a1_clock_0, , , );
F1_ram_block1a1_PORT_B_address = BUS(B1L68, B1L70, B1L71, B1L73);
F1_ram_block1a1_PORT_B_address_reg = DFFE(F1_ram_block1a1_PORT_B_address, F1_ram_block1a1_clock_0, , , );
F1_ram_block1a1_PORT_A_write_enable = B1L62;
F1_ram_block1a1_PORT_A_write_enable_reg = DFFE(F1_ram_block1a1_PORT_A_write_enable, F1_ram_block1a1_clock_0, , , );
F1_ram_block1a1_PORT_B_read_enable = VCC;
F1_ram_block1a1_PORT_B_read_enable_reg = DFFE(F1_ram_block1a1_PORT_B_read_enable, F1_ram_block1a1_clock_0, , , );
F1_ram_block1a1_clock_0 = i_clk;
F1_ram_block1a1_PORT_B_data_out = MEMORY(F1_ram_block1a1_PORT_A_data_in_reg, , F1_ram_block1a1_PORT_A_address_reg, F1_ram_block1a1_PORT_B_address_reg, F1_ram_block1a1_PORT_A_write_enable_reg, , , F1_ram_block1a1_PORT_B_read_enable_reg, , , F1_ram_block1a1_clock_0, , , , , , , );
F1_ram_block1a1 = F1_ram_block1a1_PORT_B_data_out[0];


--F1_ram_block1a2 is fifo:fifo_rx|altsyncram:r_fifo_data_rtl_0|altsyncram_noh1:auto_generated|ram_block1a2
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a2_PORT_A_data_in = r_fifo_rx_wr_data[2];
F1_ram_block1a2_PORT_A_data_in_reg = DFFE(F1_ram_block1a2_PORT_A_data_in, F1_ram_block1a2_clock_0, , , );
F1_ram_block1a2_PORT_A_address = BUS(B1_r_wr_index[0], B1_r_wr_index[1], B1_r_wr_index[2], B1_r_wr_index[3]);
F1_ram_block1a2_PORT_A_address_reg = DFFE(F1_ram_block1a2_PORT_A_address, F1_ram_block1a2_clock_0, , , );
F1_ram_block1a2_PORT_B_address = BUS(B1L68, B1L70, B1L71, B1L73);
F1_ram_block1a2_PORT_B_address_reg = DFFE(F1_ram_block1a2_PORT_B_address, F1_ram_block1a2_clock_0, , , );
F1_ram_block1a2_PORT_A_write_enable = B1L62;
F1_ram_block1a2_PORT_A_write_enable_reg = DFFE(F1_ram_block1a2_PORT_A_write_enable, F1_ram_block1a2_clock_0, , , );
F1_ram_block1a2_PORT_B_read_enable = VCC;
F1_ram_block1a2_PORT_B_read_enable_reg = DFFE(F1_ram_block1a2_PORT_B_read_enable, F1_ram_block1a2_clock_0, , , );
F1_ram_block1a2_clock_0 = i_clk;
F1_ram_block1a2_PORT_B_data_out = MEMORY(F1_ram_block1a2_PORT_A_data_in_reg, , F1_ram_block1a2_PORT_A_address_reg, F1_ram_block1a2_PORT_B_address_reg, F1_ram_block1a2_PORT_A_write_enable_reg, , , F1_ram_block1a2_PORT_B_read_enable_reg, , , F1_ram_block1a2_clock_0, , , , , , , );
F1_ram_block1a2 = F1_ram_block1a2_PORT_B_data_out[0];


--F1_ram_block1a3 is fifo:fifo_rx|altsyncram:r_fifo_data_rtl_0|altsyncram_noh1:auto_generated|ram_block1a3
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a3_PORT_A_data_in = r_fifo_rx_wr_data[3];
F1_ram_block1a3_PORT_A_data_in_reg = DFFE(F1_ram_block1a3_PORT_A_data_in, F1_ram_block1a3_clock_0, , , );
F1_ram_block1a3_PORT_A_address = BUS(B1_r_wr_index[0], B1_r_wr_index[1], B1_r_wr_index[2], B1_r_wr_index[3]);
F1_ram_block1a3_PORT_A_address_reg = DFFE(F1_ram_block1a3_PORT_A_address, F1_ram_block1a3_clock_0, , , );
F1_ram_block1a3_PORT_B_address = BUS(B1L68, B1L70, B1L71, B1L73);
F1_ram_block1a3_PORT_B_address_reg = DFFE(F1_ram_block1a3_PORT_B_address, F1_ram_block1a3_clock_0, , , );
F1_ram_block1a3_PORT_A_write_enable = B1L62;
F1_ram_block1a3_PORT_A_write_enable_reg = DFFE(F1_ram_block1a3_PORT_A_write_enable, F1_ram_block1a3_clock_0, , , );
F1_ram_block1a3_PORT_B_read_enable = VCC;
F1_ram_block1a3_PORT_B_read_enable_reg = DFFE(F1_ram_block1a3_PORT_B_read_enable, F1_ram_block1a3_clock_0, , , );
F1_ram_block1a3_clock_0 = i_clk;
F1_ram_block1a3_PORT_B_data_out = MEMORY(F1_ram_block1a3_PORT_A_data_in_reg, , F1_ram_block1a3_PORT_A_address_reg, F1_ram_block1a3_PORT_B_address_reg, F1_ram_block1a3_PORT_A_write_enable_reg, , , F1_ram_block1a3_PORT_B_read_enable_reg, , , F1_ram_block1a3_clock_0, , , , , , , );
F1_ram_block1a3 = F1_ram_block1a3_PORT_B_data_out[0];


--F1_ram_block1a4 is fifo:fifo_rx|altsyncram:r_fifo_data_rtl_0|altsyncram_noh1:auto_generated|ram_block1a4
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a4_PORT_A_data_in = r_fifo_rx_wr_data[4];
F1_ram_block1a4_PORT_A_data_in_reg = DFFE(F1_ram_block1a4_PORT_A_data_in, F1_ram_block1a4_clock_0, , , );
F1_ram_block1a4_PORT_A_address = BUS(B1_r_wr_index[0], B1_r_wr_index[1], B1_r_wr_index[2], B1_r_wr_index[3]);
F1_ram_block1a4_PORT_A_address_reg = DFFE(F1_ram_block1a4_PORT_A_address, F1_ram_block1a4_clock_0, , , );
F1_ram_block1a4_PORT_B_address = BUS(B1L68, B1L70, B1L71, B1L73);
F1_ram_block1a4_PORT_B_address_reg = DFFE(F1_ram_block1a4_PORT_B_address, F1_ram_block1a4_clock_0, , , );
F1_ram_block1a4_PORT_A_write_enable = B1L62;
F1_ram_block1a4_PORT_A_write_enable_reg = DFFE(F1_ram_block1a4_PORT_A_write_enable, F1_ram_block1a4_clock_0, , , );
F1_ram_block1a4_PORT_B_read_enable = VCC;
F1_ram_block1a4_PORT_B_read_enable_reg = DFFE(F1_ram_block1a4_PORT_B_read_enable, F1_ram_block1a4_clock_0, , , );
F1_ram_block1a4_clock_0 = i_clk;
F1_ram_block1a4_PORT_B_data_out = MEMORY(F1_ram_block1a4_PORT_A_data_in_reg, , F1_ram_block1a4_PORT_A_address_reg, F1_ram_block1a4_PORT_B_address_reg, F1_ram_block1a4_PORT_A_write_enable_reg, , , F1_ram_block1a4_PORT_B_read_enable_reg, , , F1_ram_block1a4_clock_0, , , , , , , );
F1_ram_block1a4 = F1_ram_block1a4_PORT_B_data_out[0];


--F1_ram_block1a5 is fifo:fifo_rx|altsyncram:r_fifo_data_rtl_0|altsyncram_noh1:auto_generated|ram_block1a5
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a5_PORT_A_data_in = r_fifo_rx_wr_data[5];
F1_ram_block1a5_PORT_A_data_in_reg = DFFE(F1_ram_block1a5_PORT_A_data_in, F1_ram_block1a5_clock_0, , , );
F1_ram_block1a5_PORT_A_address = BUS(B1_r_wr_index[0], B1_r_wr_index[1], B1_r_wr_index[2], B1_r_wr_index[3]);
F1_ram_block1a5_PORT_A_address_reg = DFFE(F1_ram_block1a5_PORT_A_address, F1_ram_block1a5_clock_0, , , );
F1_ram_block1a5_PORT_B_address = BUS(B1L68, B1L70, B1L71, B1L73);
F1_ram_block1a5_PORT_B_address_reg = DFFE(F1_ram_block1a5_PORT_B_address, F1_ram_block1a5_clock_0, , , );
F1_ram_block1a5_PORT_A_write_enable = B1L62;
F1_ram_block1a5_PORT_A_write_enable_reg = DFFE(F1_ram_block1a5_PORT_A_write_enable, F1_ram_block1a5_clock_0, , , );
F1_ram_block1a5_PORT_B_read_enable = VCC;
F1_ram_block1a5_PORT_B_read_enable_reg = DFFE(F1_ram_block1a5_PORT_B_read_enable, F1_ram_block1a5_clock_0, , , );
F1_ram_block1a5_clock_0 = i_clk;
F1_ram_block1a5_PORT_B_data_out = MEMORY(F1_ram_block1a5_PORT_A_data_in_reg, , F1_ram_block1a5_PORT_A_address_reg, F1_ram_block1a5_PORT_B_address_reg, F1_ram_block1a5_PORT_A_write_enable_reg, , , F1_ram_block1a5_PORT_B_read_enable_reg, , , F1_ram_block1a5_clock_0, , , , , , , );
F1_ram_block1a5 = F1_ram_block1a5_PORT_B_data_out[0];


--F1_ram_block1a6 is fifo:fifo_rx|altsyncram:r_fifo_data_rtl_0|altsyncram_noh1:auto_generated|ram_block1a6
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a6_PORT_A_data_in = r_fifo_rx_wr_data[6];
F1_ram_block1a6_PORT_A_data_in_reg = DFFE(F1_ram_block1a6_PORT_A_data_in, F1_ram_block1a6_clock_0, , , );
F1_ram_block1a6_PORT_A_address = BUS(B1_r_wr_index[0], B1_r_wr_index[1], B1_r_wr_index[2], B1_r_wr_index[3]);
F1_ram_block1a6_PORT_A_address_reg = DFFE(F1_ram_block1a6_PORT_A_address, F1_ram_block1a6_clock_0, , , );
F1_ram_block1a6_PORT_B_address = BUS(B1L68, B1L70, B1L71, B1L73);
F1_ram_block1a6_PORT_B_address_reg = DFFE(F1_ram_block1a6_PORT_B_address, F1_ram_block1a6_clock_0, , , );
F1_ram_block1a6_PORT_A_write_enable = B1L62;
F1_ram_block1a6_PORT_A_write_enable_reg = DFFE(F1_ram_block1a6_PORT_A_write_enable, F1_ram_block1a6_clock_0, , , );
F1_ram_block1a6_PORT_B_read_enable = VCC;
F1_ram_block1a6_PORT_B_read_enable_reg = DFFE(F1_ram_block1a6_PORT_B_read_enable, F1_ram_block1a6_clock_0, , , );
F1_ram_block1a6_clock_0 = i_clk;
F1_ram_block1a6_PORT_B_data_out = MEMORY(F1_ram_block1a6_PORT_A_data_in_reg, , F1_ram_block1a6_PORT_A_address_reg, F1_ram_block1a6_PORT_B_address_reg, F1_ram_block1a6_PORT_A_write_enable_reg, , , F1_ram_block1a6_PORT_B_read_enable_reg, , , F1_ram_block1a6_clock_0, , , , , , , );
F1_ram_block1a6 = F1_ram_block1a6_PORT_B_data_out[0];


--F1_ram_block1a7 is fifo:fifo_rx|altsyncram:r_fifo_data_rtl_0|altsyncram_noh1:auto_generated|ram_block1a7
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
F1_ram_block1a7_PORT_A_data_in = r_fifo_rx_wr_data[7];
F1_ram_block1a7_PORT_A_data_in_reg = DFFE(F1_ram_block1a7_PORT_A_data_in, F1_ram_block1a7_clock_0, , , );
F1_ram_block1a7_PORT_A_address = BUS(B1_r_wr_index[0], B1_r_wr_index[1], B1_r_wr_index[2], B1_r_wr_index[3]);
F1_ram_block1a7_PORT_A_address_reg = DFFE(F1_ram_block1a7_PORT_A_address, F1_ram_block1a7_clock_0, , , );
F1_ram_block1a7_PORT_B_address = BUS(B1L68, B1L70, B1L71, B1L73);
F1_ram_block1a7_PORT_B_address_reg = DFFE(F1_ram_block1a7_PORT_B_address, F1_ram_block1a7_clock_0, , , );
F1_ram_block1a7_PORT_A_write_enable = B1L62;
F1_ram_block1a7_PORT_A_write_enable_reg = DFFE(F1_ram_block1a7_PORT_A_write_enable, F1_ram_block1a7_clock_0, , , );
F1_ram_block1a7_PORT_B_read_enable = VCC;
F1_ram_block1a7_PORT_B_read_enable_reg = DFFE(F1_ram_block1a7_PORT_B_read_enable, F1_ram_block1a7_clock_0, , , );
F1_ram_block1a7_clock_0 = i_clk;
F1_ram_block1a7_PORT_B_data_out = MEMORY(F1_ram_block1a7_PORT_A_data_in_reg, , F1_ram_block1a7_PORT_A_address_reg, F1_ram_block1a7_PORT_B_address_reg, F1_ram_block1a7_PORT_A_write_enable_reg, , , F1_ram_block1a7_PORT_B_read_enable_reg, , , F1_ram_block1a7_clock_0, , , , , , , );
F1_ram_block1a7 = F1_ram_block1a7_PORT_B_data_out[0];


--B2_r_fifo_count[3] is fifo:fifo_tx|r_fifo_count[3]
--register power-up is low

B2_r_fifo_count[3] = DFFEAS(B2L20, i_clk,  ,  , B2L12,  ,  , !i_rst_sync,  );


--B2_r_fifo_count[1] is fifo:fifo_tx|r_fifo_count[1]
--register power-up is low

B2_r_fifo_count[1] = DFFEAS(B2L14, i_clk,  ,  , B2L12,  ,  , !i_rst_sync,  );


--B2_r_fifo_count[0] is fifo:fifo_tx|r_fifo_count[0]
--register power-up is low

B2_r_fifo_count[0] = DFFEAS(B2L10, i_clk,  ,  , B2L12,  ,  , !i_rst_sync,  );


--B2_r_fifo_count[2] is fifo:fifo_tx|r_fifo_count[2]
--register power-up is low

B2_r_fifo_count[2] = DFFEAS(B2L17, i_clk,  ,  , B2L12,  ,  , !i_rst_sync,  );


--B2_r_fifo_count[4] is fifo:fifo_tx|r_fifo_count[4]
--register power-up is low

B2_r_fifo_count[4] = DFFEAS(B2L23, i_clk,  ,  , B2L12,  ,  , !i_rst_sync,  );


--G1_ram_block1a0 is fifo:fifo_tx|altsyncram:r_fifo_data_rtl_0|altsyncram_r3h1:auto_generated|ram_block1a0
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
G1_ram_block1a0_PORT_A_data_in = A1L163;
G1_ram_block1a0_PORT_A_data_in_reg = DFFE(G1_ram_block1a0_PORT_A_data_in, G1_ram_block1a0_clock_0, , , );
G1_ram_block1a0_PORT_A_address = BUS(A1L163, A1L163, A1L163, A1L163);
G1_ram_block1a0_PORT_A_address_reg = DFFE(G1_ram_block1a0_PORT_A_address, G1_ram_block1a0_clock_0, , , );
G1_ram_block1a0_PORT_B_address = BUS(B2L47, B2L50, B2L52, B2L53);
G1_ram_block1a0_PORT_B_address_reg = DFFE(G1_ram_block1a0_PORT_B_address, G1_ram_block1a0_clock_0, , , );
G1_ram_block1a0_PORT_A_write_enable = GND;
G1_ram_block1a0_PORT_A_write_enable_reg = DFFE(G1_ram_block1a0_PORT_A_write_enable, G1_ram_block1a0_clock_0, , , );
G1_ram_block1a0_PORT_B_read_enable = VCC;
G1_ram_block1a0_PORT_B_read_enable_reg = DFFE(G1_ram_block1a0_PORT_B_read_enable, G1_ram_block1a0_clock_0, , , );
G1_ram_block1a0_clock_0 = i_clk;
G1_ram_block1a0_PORT_B_data_out = MEMORY(G1_ram_block1a0_PORT_A_data_in_reg, , G1_ram_block1a0_PORT_A_address_reg, G1_ram_block1a0_PORT_B_address_reg, G1_ram_block1a0_PORT_A_write_enable_reg, , , G1_ram_block1a0_PORT_B_read_enable_reg, , , G1_ram_block1a0_clock_0, , , , , , , );
G1_ram_block1a0 = G1_ram_block1a0_PORT_B_data_out[0];


--G1_ram_block1a1 is fifo:fifo_tx|altsyncram:r_fifo_data_rtl_0|altsyncram_r3h1:auto_generated|ram_block1a1
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
G1_ram_block1a1_PORT_A_data_in = A1L163;
G1_ram_block1a1_PORT_A_data_in_reg = DFFE(G1_ram_block1a1_PORT_A_data_in, G1_ram_block1a1_clock_0, , , );
G1_ram_block1a1_PORT_A_address = BUS(A1L163, A1L163, A1L163, A1L163);
G1_ram_block1a1_PORT_A_address_reg = DFFE(G1_ram_block1a1_PORT_A_address, G1_ram_block1a1_clock_0, , , );
G1_ram_block1a1_PORT_B_address = BUS(B2L47, B2L50, B2L52, B2L53);
G1_ram_block1a1_PORT_B_address_reg = DFFE(G1_ram_block1a1_PORT_B_address, G1_ram_block1a1_clock_0, , , );
G1_ram_block1a1_PORT_A_write_enable = GND;
G1_ram_block1a1_PORT_A_write_enable_reg = DFFE(G1_ram_block1a1_PORT_A_write_enable, G1_ram_block1a1_clock_0, , , );
G1_ram_block1a1_PORT_B_read_enable = VCC;
G1_ram_block1a1_PORT_B_read_enable_reg = DFFE(G1_ram_block1a1_PORT_B_read_enable, G1_ram_block1a1_clock_0, , , );
G1_ram_block1a1_clock_0 = i_clk;
G1_ram_block1a1_PORT_B_data_out = MEMORY(G1_ram_block1a1_PORT_A_data_in_reg, , G1_ram_block1a1_PORT_A_address_reg, G1_ram_block1a1_PORT_B_address_reg, G1_ram_block1a1_PORT_A_write_enable_reg, , , G1_ram_block1a1_PORT_B_read_enable_reg, , , G1_ram_block1a1_clock_0, , , , , , , );
G1_ram_block1a1 = G1_ram_block1a1_PORT_B_data_out[0];


--G1_ram_block1a2 is fifo:fifo_tx|altsyncram:r_fifo_data_rtl_0|altsyncram_r3h1:auto_generated|ram_block1a2
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
G1_ram_block1a2_PORT_A_data_in = A1L163;
G1_ram_block1a2_PORT_A_data_in_reg = DFFE(G1_ram_block1a2_PORT_A_data_in, G1_ram_block1a2_clock_0, , , );
G1_ram_block1a2_PORT_A_address = BUS(A1L163, A1L163, A1L163, A1L163);
G1_ram_block1a2_PORT_A_address_reg = DFFE(G1_ram_block1a2_PORT_A_address, G1_ram_block1a2_clock_0, , , );
G1_ram_block1a2_PORT_B_address = BUS(B2L47, B2L50, B2L52, B2L53);
G1_ram_block1a2_PORT_B_address_reg = DFFE(G1_ram_block1a2_PORT_B_address, G1_ram_block1a2_clock_0, , , );
G1_ram_block1a2_PORT_A_write_enable = GND;
G1_ram_block1a2_PORT_A_write_enable_reg = DFFE(G1_ram_block1a2_PORT_A_write_enable, G1_ram_block1a2_clock_0, , , );
G1_ram_block1a2_PORT_B_read_enable = VCC;
G1_ram_block1a2_PORT_B_read_enable_reg = DFFE(G1_ram_block1a2_PORT_B_read_enable, G1_ram_block1a2_clock_0, , , );
G1_ram_block1a2_clock_0 = i_clk;
G1_ram_block1a2_PORT_B_data_out = MEMORY(G1_ram_block1a2_PORT_A_data_in_reg, , G1_ram_block1a2_PORT_A_address_reg, G1_ram_block1a2_PORT_B_address_reg, G1_ram_block1a2_PORT_A_write_enable_reg, , , G1_ram_block1a2_PORT_B_read_enable_reg, , , G1_ram_block1a2_clock_0, , , , , , , );
G1_ram_block1a2 = G1_ram_block1a2_PORT_B_data_out[0];


--G1_ram_block1a3 is fifo:fifo_tx|altsyncram:r_fifo_data_rtl_0|altsyncram_r3h1:auto_generated|ram_block1a3
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
G1_ram_block1a3_PORT_A_data_in = A1L163;
G1_ram_block1a3_PORT_A_data_in_reg = DFFE(G1_ram_block1a3_PORT_A_data_in, G1_ram_block1a3_clock_0, , , );
G1_ram_block1a3_PORT_A_address = BUS(A1L163, A1L163, A1L163, A1L163);
G1_ram_block1a3_PORT_A_address_reg = DFFE(G1_ram_block1a3_PORT_A_address, G1_ram_block1a3_clock_0, , , );
G1_ram_block1a3_PORT_B_address = BUS(B2L47, B2L50, B2L52, B2L53);
G1_ram_block1a3_PORT_B_address_reg = DFFE(G1_ram_block1a3_PORT_B_address, G1_ram_block1a3_clock_0, , , );
G1_ram_block1a3_PORT_A_write_enable = GND;
G1_ram_block1a3_PORT_A_write_enable_reg = DFFE(G1_ram_block1a3_PORT_A_write_enable, G1_ram_block1a3_clock_0, , , );
G1_ram_block1a3_PORT_B_read_enable = VCC;
G1_ram_block1a3_PORT_B_read_enable_reg = DFFE(G1_ram_block1a3_PORT_B_read_enable, G1_ram_block1a3_clock_0, , , );
G1_ram_block1a3_clock_0 = i_clk;
G1_ram_block1a3_PORT_B_data_out = MEMORY(G1_ram_block1a3_PORT_A_data_in_reg, , G1_ram_block1a3_PORT_A_address_reg, G1_ram_block1a3_PORT_B_address_reg, G1_ram_block1a3_PORT_A_write_enable_reg, , , G1_ram_block1a3_PORT_B_read_enable_reg, , , G1_ram_block1a3_clock_0, , , , , , , );
G1_ram_block1a3 = G1_ram_block1a3_PORT_B_data_out[0];


--G1_ram_block1a4 is fifo:fifo_tx|altsyncram:r_fifo_data_rtl_0|altsyncram_r3h1:auto_generated|ram_block1a4
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
G1_ram_block1a4_PORT_A_data_in = A1L163;
G1_ram_block1a4_PORT_A_data_in_reg = DFFE(G1_ram_block1a4_PORT_A_data_in, G1_ram_block1a4_clock_0, , , );
G1_ram_block1a4_PORT_A_address = BUS(A1L163, A1L163, A1L163, A1L163);
G1_ram_block1a4_PORT_A_address_reg = DFFE(G1_ram_block1a4_PORT_A_address, G1_ram_block1a4_clock_0, , , );
G1_ram_block1a4_PORT_B_address = BUS(B2L47, B2L50, B2L52, B2L53);
G1_ram_block1a4_PORT_B_address_reg = DFFE(G1_ram_block1a4_PORT_B_address, G1_ram_block1a4_clock_0, , , );
G1_ram_block1a4_PORT_A_write_enable = GND;
G1_ram_block1a4_PORT_A_write_enable_reg = DFFE(G1_ram_block1a4_PORT_A_write_enable, G1_ram_block1a4_clock_0, , , );
G1_ram_block1a4_PORT_B_read_enable = VCC;
G1_ram_block1a4_PORT_B_read_enable_reg = DFFE(G1_ram_block1a4_PORT_B_read_enable, G1_ram_block1a4_clock_0, , , );
G1_ram_block1a4_clock_0 = i_clk;
G1_ram_block1a4_PORT_B_data_out = MEMORY(G1_ram_block1a4_PORT_A_data_in_reg, , G1_ram_block1a4_PORT_A_address_reg, G1_ram_block1a4_PORT_B_address_reg, G1_ram_block1a4_PORT_A_write_enable_reg, , , G1_ram_block1a4_PORT_B_read_enable_reg, , , G1_ram_block1a4_clock_0, , , , , , , );
G1_ram_block1a4 = G1_ram_block1a4_PORT_B_data_out[0];


--G1_ram_block1a5 is fifo:fifo_tx|altsyncram:r_fifo_data_rtl_0|altsyncram_r3h1:auto_generated|ram_block1a5
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
G1_ram_block1a5_PORT_A_data_in = A1L163;
G1_ram_block1a5_PORT_A_data_in_reg = DFFE(G1_ram_block1a5_PORT_A_data_in, G1_ram_block1a5_clock_0, , , );
G1_ram_block1a5_PORT_A_address = BUS(A1L163, A1L163, A1L163, A1L163);
G1_ram_block1a5_PORT_A_address_reg = DFFE(G1_ram_block1a5_PORT_A_address, G1_ram_block1a5_clock_0, , , );
G1_ram_block1a5_PORT_B_address = BUS(B2L47, B2L50, B2L52, B2L53);
G1_ram_block1a5_PORT_B_address_reg = DFFE(G1_ram_block1a5_PORT_B_address, G1_ram_block1a5_clock_0, , , );
G1_ram_block1a5_PORT_A_write_enable = GND;
G1_ram_block1a5_PORT_A_write_enable_reg = DFFE(G1_ram_block1a5_PORT_A_write_enable, G1_ram_block1a5_clock_0, , , );
G1_ram_block1a5_PORT_B_read_enable = VCC;
G1_ram_block1a5_PORT_B_read_enable_reg = DFFE(G1_ram_block1a5_PORT_B_read_enable, G1_ram_block1a5_clock_0, , , );
G1_ram_block1a5_clock_0 = i_clk;
G1_ram_block1a5_PORT_B_data_out = MEMORY(G1_ram_block1a5_PORT_A_data_in_reg, , G1_ram_block1a5_PORT_A_address_reg, G1_ram_block1a5_PORT_B_address_reg, G1_ram_block1a5_PORT_A_write_enable_reg, , , G1_ram_block1a5_PORT_B_read_enable_reg, , , G1_ram_block1a5_clock_0, , , , , , , );
G1_ram_block1a5 = G1_ram_block1a5_PORT_B_data_out[0];


--G1_ram_block1a6 is fifo:fifo_tx|altsyncram:r_fifo_data_rtl_0|altsyncram_r3h1:auto_generated|ram_block1a6
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
G1_ram_block1a6_PORT_A_data_in = A1L163;
G1_ram_block1a6_PORT_A_data_in_reg = DFFE(G1_ram_block1a6_PORT_A_data_in, G1_ram_block1a6_clock_0, , , );
G1_ram_block1a6_PORT_A_address = BUS(A1L163, A1L163, A1L163, A1L163);
G1_ram_block1a6_PORT_A_address_reg = DFFE(G1_ram_block1a6_PORT_A_address, G1_ram_block1a6_clock_0, , , );
G1_ram_block1a6_PORT_B_address = BUS(B2L47, B2L50, B2L52, B2L53);
G1_ram_block1a6_PORT_B_address_reg = DFFE(G1_ram_block1a6_PORT_B_address, G1_ram_block1a6_clock_0, , , );
G1_ram_block1a6_PORT_A_write_enable = GND;
G1_ram_block1a6_PORT_A_write_enable_reg = DFFE(G1_ram_block1a6_PORT_A_write_enable, G1_ram_block1a6_clock_0, , , );
G1_ram_block1a6_PORT_B_read_enable = VCC;
G1_ram_block1a6_PORT_B_read_enable_reg = DFFE(G1_ram_block1a6_PORT_B_read_enable, G1_ram_block1a6_clock_0, , , );
G1_ram_block1a6_clock_0 = i_clk;
G1_ram_block1a6_PORT_B_data_out = MEMORY(G1_ram_block1a6_PORT_A_data_in_reg, , G1_ram_block1a6_PORT_A_address_reg, G1_ram_block1a6_PORT_B_address_reg, G1_ram_block1a6_PORT_A_write_enable_reg, , , G1_ram_block1a6_PORT_B_read_enable_reg, , , G1_ram_block1a6_clock_0, , , , , , , );
G1_ram_block1a6 = G1_ram_block1a6_PORT_B_data_out[0];


--G1_ram_block1a7 is fifo:fifo_tx|altsyncram:r_fifo_data_rtl_0|altsyncram_r3h1:auto_generated|ram_block1a7
--RAM Block Operation Mode: Simple Dual-Port
--Port A Depth: 10, Port A Width: 1, Port B Depth: 10, Port B Width: 1
--Port A Logical Depth: 10, Port A Logical Width: 8, Port B Logical Depth: 10, Port B Logical Width: 8
--Port A Input: Registered, Port B Input: Registered, Port B Output: Un-registered
G1_ram_block1a7_PORT_A_data_in = A1L163;
G1_ram_block1a7_PORT_A_data_in_reg = DFFE(G1_ram_block1a7_PORT_A_data_in, G1_ram_block1a7_clock_0, , , );
G1_ram_block1a7_PORT_A_address = BUS(A1L163, A1L163, A1L163, A1L163);
G1_ram_block1a7_PORT_A_address_reg = DFFE(G1_ram_block1a7_PORT_A_address, G1_ram_block1a7_clock_0, , , );
G1_ram_block1a7_PORT_B_address = BUS(B2L47, B2L50, B2L52, B2L53);
G1_ram_block1a7_PORT_B_address_reg = DFFE(G1_ram_block1a7_PORT_B_address, G1_ram_block1a7_clock_0, , , );
G1_ram_block1a7_PORT_A_write_enable = GND;
G1_ram_block1a7_PORT_A_write_enable_reg = DFFE(G1_ram_block1a7_PORT_A_write_enable, G1_ram_block1a7_clock_0, , , );
G1_ram_block1a7_PORT_B_read_enable = VCC;
G1_ram_block1a7_PORT_B_read_enable_reg = DFFE(G1_ram_block1a7_PORT_B_read_enable, G1_ram_block1a7_clock_0, , , );
G1_ram_block1a7_clock_0 = i_clk;
G1_ram_block1a7_PORT_B_data_out = MEMORY(G1_ram_block1a7_PORT_A_data_in_reg, , G1_ram_block1a7_PORT_A_address_reg, G1_ram_block1a7_PORT_B_address_reg, G1_ram_block1a7_PORT_A_write_enable_reg, , , G1_ram_block1a7_PORT_B_read_enable_reg, , , G1_ram_block1a7_clock_0, , , , , , , );
G1_ram_block1a7 = G1_ram_block1a7_PORT_B_data_out[0];


--B1L11 is fifo:fifo_rx|r_fifo_count[0]~5
B1L11 = B1_r_fifo_count[0] $ (VCC);

--B1L12 is fifo:fifo_rx|r_fifo_count[0]~6
B1L12 = CARRY(B1_r_fifo_count[0]);


--B1L14 is fifo:fifo_rx|r_fifo_count[1]~7
B1L14 = (B1_r_fifo_count[1] & (B1L12 & VCC)) # (!B1_r_fifo_count[1] & (!B1L12));

--B1L15 is fifo:fifo_rx|r_fifo_count[1]~8
B1L15 = CARRY((!B1_r_fifo_count[1] & !B1L12));


--B1L17 is fifo:fifo_rx|r_fifo_count[2]~9
B1L17 = (B1_r_fifo_count[2] & ((GND) # (!B1L15))) # (!B1_r_fifo_count[2] & (B1L15 $ (GND)));

--B1L18 is fifo:fifo_rx|r_fifo_count[2]~10
B1L18 = CARRY((B1_r_fifo_count[2]) # (!B1L15));


--B1L20 is fifo:fifo_rx|r_fifo_count[3]~11
B1L20 = (B1_r_fifo_count[3] & (B1L18 & VCC)) # (!B1_r_fifo_count[3] & (!B1L18));

--B1L21 is fifo:fifo_rx|r_fifo_count[3]~12
B1L21 = CARRY((!B1_r_fifo_count[3] & !B1L18));


--B1L23 is fifo:fifo_rx|r_fifo_count[4]~13
B1L23 = B1_r_fifo_count[4] $ (B1L21);


--B2L10 is fifo:fifo_tx|r_fifo_count[0]~5
B2L10 = B2_r_fifo_count[0] $ (VCC);

--B2L11 is fifo:fifo_tx|r_fifo_count[0]~6
B2L11 = CARRY(B2_r_fifo_count[0]);


--B2L14 is fifo:fifo_tx|r_fifo_count[1]~7
B2L14 = (B2_r_fifo_count[1] & (B2L11 & VCC)) # (!B2_r_fifo_count[1] & (!B2L11));

--B2L15 is fifo:fifo_tx|r_fifo_count[1]~8
B2L15 = CARRY((!B2_r_fifo_count[1] & !B2L11));


--B2L17 is fifo:fifo_tx|r_fifo_count[2]~9
B2L17 = (B2_r_fifo_count[2] & ((GND) # (!B2L15))) # (!B2_r_fifo_count[2] & (B2L15 $ (GND)));

--B2L18 is fifo:fifo_tx|r_fifo_count[2]~10
B2L18 = CARRY((B2_r_fifo_count[2]) # (!B2L15));


--B2L20 is fifo:fifo_tx|r_fifo_count[3]~11
B2L20 = (B2_r_fifo_count[3] & (B2L18 & VCC)) # (!B2_r_fifo_count[3] & (!B2L18));

--B2L21 is fifo:fifo_tx|r_fifo_count[3]~12
B2L21 = CARRY((!B2_r_fifo_count[3] & !B2L18));


--B2L23 is fifo:fifo_tx|r_fifo_count[4]~14
B2L23 = B2_r_fifo_count[4] $ (B2L21);


--D1_r_clk_count[10] is uart_tx:transmitter|r_clk_count[10]
--register power-up is low

D1_r_clk_count[10] = DFFEAS(D1L47, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1_r_clk_count[11] is uart_tx:transmitter|r_clk_count[11]
--register power-up is low

D1_r_clk_count[11] = DFFEAS(D1L50, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1_r_clk_count[3] is uart_tx:transmitter|r_clk_count[3]
--register power-up is low

D1_r_clk_count[3] = DFFEAS(D1L26, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1_r_clk_count[4] is uart_tx:transmitter|r_clk_count[4]
--register power-up is low

D1_r_clk_count[4] = DFFEAS(D1L29, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1_r_clk_count[5] is uart_tx:transmitter|r_clk_count[5]
--register power-up is low

D1_r_clk_count[5] = DFFEAS(D1L32, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1_r_clk_count[6] is uart_tx:transmitter|r_clk_count[6]
--register power-up is low

D1_r_clk_count[6] = DFFEAS(D1L35, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1_r_clk_count[7] is uart_tx:transmitter|r_clk_count[7]
--register power-up is low

D1_r_clk_count[7] = DFFEAS(D1L38, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1_r_clk_count[8] is uart_tx:transmitter|r_clk_count[8]
--register power-up is low

D1_r_clk_count[8] = DFFEAS(D1L41, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1_r_clk_count[9] is uart_tx:transmitter|r_clk_count[9]
--register power-up is low

D1_r_clk_count[9] = DFFEAS(D1L44, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1_r_clk_count[12] is uart_tx:transmitter|r_clk_count[12]
--register power-up is low

D1_r_clk_count[12] = DFFEAS(D1L54, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--C1_r_clk_count[12] is uart_rx:receiver|r_clk_count[12]
--register power-up is low

C1_r_clk_count[12] = DFFEAS(C1L60, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1_r_clk_count[3] is uart_rx:receiver|r_clk_count[3]
--register power-up is low

C1_r_clk_count[3] = DFFEAS(C1L29, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1_r_clk_count[4] is uart_rx:receiver|r_clk_count[4]
--register power-up is low

C1_r_clk_count[4] = DFFEAS(C1L32, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1_r_clk_count[5] is uart_rx:receiver|r_clk_count[5]
--register power-up is low

C1_r_clk_count[5] = DFFEAS(C1L35, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1_r_clk_count[6] is uart_rx:receiver|r_clk_count[6]
--register power-up is low

C1_r_clk_count[6] = DFFEAS(C1L38, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1_r_clk_count[11] is uart_rx:receiver|r_clk_count[11]
--register power-up is low

C1_r_clk_count[11] = DFFEAS(C1L57, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1_r_clk_count[7] is uart_rx:receiver|r_clk_count[7]
--register power-up is low

C1_r_clk_count[7] = DFFEAS(C1L41, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1_r_clk_count[8] is uart_rx:receiver|r_clk_count[8]
--register power-up is low

C1_r_clk_count[8] = DFFEAS(C1L44, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1_r_clk_count[9] is uart_rx:receiver|r_clk_count[9]
--register power-up is low

C1_r_clk_count[9] = DFFEAS(C1L47, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1_r_clk_count[10] is uart_rx:receiver|r_clk_count[10]
--register power-up is low

C1_r_clk_count[10] = DFFEAS(C1L54, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--D1_r_clk_count[2] is uart_tx:transmitter|r_clk_count[2]
--register power-up is low

D1_r_clk_count[2] = DFFEAS(D1L23, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1_r_clk_count[1] is uart_tx:transmitter|r_clk_count[1]
--register power-up is low

D1_r_clk_count[1] = DFFEAS(D1L20, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1_r_clk_count[0] is uart_tx:transmitter|r_clk_count[0]
--register power-up is low

D1_r_clk_count[0] = DFFEAS(D1L17, i_clk,  ,  , !D1_r_sm_main.s_cleanup,  ,  , D1L53,  );


--D1L17 is uart_tx:transmitter|r_clk_count[0]~13
D1L17 = D1_r_clk_count[0] $ (VCC);

--D1L18 is uart_tx:transmitter|r_clk_count[0]~14
D1L18 = CARRY(D1_r_clk_count[0]);


--D1L20 is uart_tx:transmitter|r_clk_count[1]~15
D1L20 = (D1_r_clk_count[1] & (!D1L18)) # (!D1_r_clk_count[1] & ((D1L18) # (GND)));

--D1L21 is uart_tx:transmitter|r_clk_count[1]~16
D1L21 = CARRY((!D1L18) # (!D1_r_clk_count[1]));


--D1L23 is uart_tx:transmitter|r_clk_count[2]~17
D1L23 = (D1_r_clk_count[2] & (D1L21 $ (GND))) # (!D1_r_clk_count[2] & (!D1L21 & VCC));

--D1L24 is uart_tx:transmitter|r_clk_count[2]~18
D1L24 = CARRY((D1_r_clk_count[2] & !D1L21));


--D1L26 is uart_tx:transmitter|r_clk_count[3]~19
D1L26 = (D1_r_clk_count[3] & (!D1L24)) # (!D1_r_clk_count[3] & ((D1L24) # (GND)));

--D1L27 is uart_tx:transmitter|r_clk_count[3]~20
D1L27 = CARRY((!D1L24) # (!D1_r_clk_count[3]));


--D1L29 is uart_tx:transmitter|r_clk_count[4]~21
D1L29 = (D1_r_clk_count[4] & (D1L27 $ (GND))) # (!D1_r_clk_count[4] & (!D1L27 & VCC));

--D1L30 is uart_tx:transmitter|r_clk_count[4]~22
D1L30 = CARRY((D1_r_clk_count[4] & !D1L27));


--D1L32 is uart_tx:transmitter|r_clk_count[5]~23
D1L32 = (D1_r_clk_count[5] & (!D1L30)) # (!D1_r_clk_count[5] & ((D1L30) # (GND)));

--D1L33 is uart_tx:transmitter|r_clk_count[5]~24
D1L33 = CARRY((!D1L30) # (!D1_r_clk_count[5]));


--D1L35 is uart_tx:transmitter|r_clk_count[6]~25
D1L35 = (D1_r_clk_count[6] & (D1L33 $ (GND))) # (!D1_r_clk_count[6] & (!D1L33 & VCC));

--D1L36 is uart_tx:transmitter|r_clk_count[6]~26
D1L36 = CARRY((D1_r_clk_count[6] & !D1L33));


--D1L38 is uart_tx:transmitter|r_clk_count[7]~27
D1L38 = (D1_r_clk_count[7] & (!D1L36)) # (!D1_r_clk_count[7] & ((D1L36) # (GND)));

--D1L39 is uart_tx:transmitter|r_clk_count[7]~28
D1L39 = CARRY((!D1L36) # (!D1_r_clk_count[7]));


--D1L41 is uart_tx:transmitter|r_clk_count[8]~29
D1L41 = (D1_r_clk_count[8] & (D1L39 $ (GND))) # (!D1_r_clk_count[8] & (!D1L39 & VCC));

--D1L42 is uart_tx:transmitter|r_clk_count[8]~30
D1L42 = CARRY((D1_r_clk_count[8] & !D1L39));


--D1L44 is uart_tx:transmitter|r_clk_count[9]~31
D1L44 = (D1_r_clk_count[9] & (!D1L42)) # (!D1_r_clk_count[9] & ((D1L42) # (GND)));

--D1L45 is uart_tx:transmitter|r_clk_count[9]~32
D1L45 = CARRY((!D1L42) # (!D1_r_clk_count[9]));


--D1L47 is uart_tx:transmitter|r_clk_count[10]~33
D1L47 = (D1_r_clk_count[10] & (D1L45 $ (GND))) # (!D1_r_clk_count[10] & (!D1L45 & VCC));

--D1L48 is uart_tx:transmitter|r_clk_count[10]~34
D1L48 = CARRY((D1_r_clk_count[10] & !D1L45));


--D1L50 is uart_tx:transmitter|r_clk_count[11]~36
D1L50 = (D1_r_clk_count[11] & (!D1L48)) # (!D1_r_clk_count[11] & ((D1L48) # (GND)));

--D1L51 is uart_tx:transmitter|r_clk_count[11]~37
D1L51 = CARRY((!D1L48) # (!D1_r_clk_count[11]));


--D1L54 is uart_tx:transmitter|r_clk_count[12]~38
D1L54 = D1_r_clk_count[12] $ (!D1L51);


--C1_r_clk_count[2] is uart_rx:receiver|r_clk_count[2]
--register power-up is low

C1_r_clk_count[2] = DFFEAS(C1L26, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1_r_clk_count[1] is uart_rx:receiver|r_clk_count[1]
--register power-up is low

C1_r_clk_count[1] = DFFEAS(C1L23, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1_r_clk_count[0] is uart_rx:receiver|r_clk_count[0]
--register power-up is low

C1_r_clk_count[0] = DFFEAS(C1L20, i_clk,  ,  , C1L52,  ,  , C1L51,  );


--C1L20 is uart_rx:receiver|r_clk_count[0]~13
C1L20 = C1_r_clk_count[0] $ (VCC);

--C1L21 is uart_rx:receiver|r_clk_count[0]~14
C1L21 = CARRY(C1_r_clk_count[0]);


--C1L23 is uart_rx:receiver|r_clk_count[1]~15
C1L23 = (C1_r_clk_count[1] & (!C1L21)) # (!C1_r_clk_count[1] & ((C1L21) # (GND)));

--C1L24 is uart_rx:receiver|r_clk_count[1]~16
C1L24 = CARRY((!C1L21) # (!C1_r_clk_count[1]));


--C1L26 is uart_rx:receiver|r_clk_count[2]~17
C1L26 = (C1_r_clk_count[2] & (C1L24 $ (GND))) # (!C1_r_clk_count[2] & (!C1L24 & VCC));

--C1L27 is uart_rx:receiver|r_clk_count[2]~18
C1L27 = CARRY((C1_r_clk_count[2] & !C1L24));


--C1L29 is uart_rx:receiver|r_clk_count[3]~19
C1L29 = (C1_r_clk_count[3] & (!C1L27)) # (!C1_r_clk_count[3] & ((C1L27) # (GND)));

--C1L30 is uart_rx:receiver|r_clk_count[3]~20
C1L30 = CARRY((!C1L27) # (!C1_r_clk_count[3]));


--C1L32 is uart_rx:receiver|r_clk_count[4]~21
C1L32 = (C1_r_clk_count[4] & (C1L30 $ (GND))) # (!C1_r_clk_count[4] & (!C1L30 & VCC));

--C1L33 is uart_rx:receiver|r_clk_count[4]~22
C1L33 = CARRY((C1_r_clk_count[4] & !C1L30));


--C1L35 is uart_rx:receiver|r_clk_count[5]~23
C1L35 = (C1_r_clk_count[5] & (!C1L33)) # (!C1_r_clk_count[5] & ((C1L33) # (GND)));

--C1L36 is uart_rx:receiver|r_clk_count[5]~24
C1L36 = CARRY((!C1L33) # (!C1_r_clk_count[5]));


--C1L38 is uart_rx:receiver|r_clk_count[6]~25
C1L38 = (C1_r_clk_count[6] & (C1L36 $ (GND))) # (!C1_r_clk_count[6] & (!C1L36 & VCC));

--C1L39 is uart_rx:receiver|r_clk_count[6]~26
C1L39 = CARRY((C1_r_clk_count[6] & !C1L36));


--C1L41 is uart_rx:receiver|r_clk_count[7]~27
C1L41 = (C1_r_clk_count[7] & (!C1L39)) # (!C1_r_clk_count[7] & ((C1L39) # (GND)));

--C1L42 is uart_rx:receiver|r_clk_count[7]~28
C1L42 = CARRY((!C1L39) # (!C1_r_clk_count[7]));


--C1L44 is uart_rx:receiver|r_clk_count[8]~29
C1L44 = (C1_r_clk_count[8] & (C1L42 $ (GND))) # (!C1_r_clk_count[8] & (!C1L42 & VCC));

--C1L45 is uart_rx:receiver|r_clk_count[8]~30
C1L45 = CARRY((C1_r_clk_count[8] & !C1L42));


--C1L47 is uart_rx:receiver|r_clk_count[9]~31
C1L47 = (C1_r_clk_count[9] & (!C1L45)) # (!C1_r_clk_count[9] & ((C1L45) # (GND)));

--C1L48 is uart_rx:receiver|r_clk_count[9]~32
C1L48 = CARRY((!C1L45) # (!C1_r_clk_count[9]));


--C1L54 is uart_rx:receiver|r_clk_count[10]~33
C1L54 = (C1_r_clk_count[10] & (C1L48 $ (GND))) # (!C1_r_clk_count[10] & (!C1L48 & VCC));

--C1L55 is uart_rx:receiver|r_clk_count[10]~34
C1L55 = CARRY((C1_r_clk_count[10] & !C1L48));


--C1L57 is uart_rx:receiver|r_clk_count[11]~35
C1L57 = (C1_r_clk_count[11] & (!C1L55)) # (!C1_r_clk_count[11] & ((C1L55) # (GND)));

--C1L58 is uart_rx:receiver|r_clk_count[11]~36
C1L58 = CARRY((!C1L55) # (!C1_r_clk_count[11]));


--C1L60 is uart_rx:receiver|r_clk_count[12]~37
C1L60 = C1_r_clk_count[12] $ (!C1L58);


--o_status[0] is o_status[0]
o_status[0] = OUTPUT(A1L126);


--o_status[1] is o_status[1]
o_status[1] = OUTPUT(A1L129);


--o_status[2] is o_status[2]
o_status[2] = OUTPUT(A1L131);


--o_status[3] is o_status[3]
o_status[3] = OUTPUT(A1L133);


--i_fifo_rx_wr_en is i_fifo_rx_wr_en
i_fifo_rx_wr_en = INPUT();


--i_fifo_rx_wr_data[0] is i_fifo_rx_wr_data[0]
i_fifo_rx_wr_data[0] = INPUT();


--i_fifo_rx_wr_data[1] is i_fifo_rx_wr_data[1]
i_fifo_rx_wr_data[1] = INPUT();


--i_fifo_rx_wr_data[2] is i_fifo_rx_wr_data[2]
i_fifo_rx_wr_data[2] = INPUT();


--i_fifo_rx_wr_data[3] is i_fifo_rx_wr_data[3]
i_fifo_rx_wr_data[3] = INPUT();


--i_fifo_rx_wr_data[4] is i_fifo_rx_wr_data[4]
i_fifo_rx_wr_data[4] = INPUT();


--i_fifo_rx_wr_data[5] is i_fifo_rx_wr_data[5]
i_fifo_rx_wr_data[5] = INPUT();


--i_fifo_rx_wr_data[6] is i_fifo_rx_wr_data[6]
i_fifo_rx_wr_data[6] = INPUT();


--i_fifo_rx_wr_data[7] is i_fifo_rx_wr_data[7]
i_fifo_rx_wr_data[7] = INPUT();


--o_fifo_rx_full is o_fifo_rx_full
o_fifo_rx_full = OUTPUT(B1L7);


--i_fifo_rx_rd_en is i_fifo_rx_rd_en
i_fifo_rx_rd_en = INPUT();


--o_fifo_rx_rd_data[0] is o_fifo_rx_rd_data[0]
o_fifo_rx_rd_data[0] = OUTPUT(B1L54);


--o_fifo_rx_rd_data[1] is o_fifo_rx_rd_data[1]
o_fifo_rx_rd_data[1] = OUTPUT(B1L55);


--o_fifo_rx_rd_data[2] is o_fifo_rx_rd_data[2]
o_fifo_rx_rd_data[2] = OUTPUT(B1L56);


--o_fifo_rx_rd_data[3] is o_fifo_rx_rd_data[3]
o_fifo_rx_rd_data[3] = OUTPUT(B1L57);


--o_fifo_rx_rd_data[4] is o_fifo_rx_rd_data[4]
o_fifo_rx_rd_data[4] = OUTPUT(B1L58);


--o_fifo_rx_rd_data[5] is o_fifo_rx_rd_data[5]
o_fifo_rx_rd_data[5] = OUTPUT(B1L59);


--o_fifo_rx_rd_data[6] is o_fifo_rx_rd_data[6]
o_fifo_rx_rd_data[6] = OUTPUT(B1L60);


--o_fifo_rx_rd_data[7] is o_fifo_rx_rd_data[7]
o_fifo_rx_rd_data[7] = OUTPUT(B1L61);


--o_fifo_rx_empty is o_fifo_rx_empty
o_fifo_rx_empty = OUTPUT(B1L8);


--i_fifo_tx_wr_en is i_fifo_tx_wr_en
i_fifo_tx_wr_en = INPUT();


--i_fifo_tx_wr_data[0] is i_fifo_tx_wr_data[0]
i_fifo_tx_wr_data[0] = INPUT();


--i_fifo_tx_wr_data[1] is i_fifo_tx_wr_data[1]
i_fifo_tx_wr_data[1] = INPUT();


--i_fifo_tx_wr_data[2] is i_fifo_tx_wr_data[2]
i_fifo_tx_wr_data[2] = INPUT();


--i_fifo_tx_wr_data[3] is i_fifo_tx_wr_data[3]
i_fifo_tx_wr_data[3] = INPUT();


--i_fifo_tx_wr_data[4] is i_fifo_tx_wr_data[4]
i_fifo_tx_wr_data[4] = INPUT();


--i_fifo_tx_wr_data[5] is i_fifo_tx_wr_data[5]
i_fifo_tx_wr_data[5] = INPUT();


--i_fifo_tx_wr_data[6] is i_fifo_tx_wr_data[6]
i_fifo_tx_wr_data[6] = INPUT();


--i_fifo_tx_wr_data[7] is i_fifo_tx_wr_data[7]
i_fifo_tx_wr_data[7] = INPUT();


--o_fifo_tx_full is o_fifo_tx_full
o_fifo_tx_full = OUTPUT(B2L5);


--i_fifo_tx_rd_en is i_fifo_tx_rd_en
i_fifo_tx_rd_en = INPUT();


--o_fifo_tx_rd_data[0] is o_fifo_tx_rd_data[0]
o_fifo_tx_rd_data[0] = OUTPUT(B2L34);


--o_fifo_tx_rd_data[1] is o_fifo_tx_rd_data[1]
o_fifo_tx_rd_data[1] = OUTPUT(B2L35);


--o_fifo_tx_rd_data[2] is o_fifo_tx_rd_data[2]
o_fifo_tx_rd_data[2] = OUTPUT(B2L36);


--o_fifo_tx_rd_data[3] is o_fifo_tx_rd_data[3]
o_fifo_tx_rd_data[3] = OUTPUT(B2L37);


--o_fifo_tx_rd_data[4] is o_fifo_tx_rd_data[4]
o_fifo_tx_rd_data[4] = OUTPUT(B2L38);


--o_fifo_tx_rd_data[5] is o_fifo_tx_rd_data[5]
o_fifo_tx_rd_data[5] = OUTPUT(B2L39);


--o_fifo_tx_rd_data[6] is o_fifo_tx_rd_data[6]
o_fifo_tx_rd_data[6] = OUTPUT(B2L40);


--o_fifo_tx_rd_data[7] is o_fifo_tx_rd_data[7]
o_fifo_tx_rd_data[7] = OUTPUT(B2L41);


--o_fifo_tx_empty is o_fifo_tx_empty
o_fifo_tx_empty = OUTPUT(B2L7);


--i_tx_dv is i_tx_dv
i_tx_dv = INPUT();


--tx_data[0] is tx_data[0]
tx_data[0] = INPUT();


--tx_data[1] is tx_data[1]
tx_data[1] = INPUT();


--tx_data[2] is tx_data[2]
tx_data[2] = INPUT();


--tx_data[3] is tx_data[3]
tx_data[3] = INPUT();


--tx_data[4] is tx_data[4]
tx_data[4] = INPUT();


--tx_data[5] is tx_data[5]
tx_data[5] = INPUT();


--tx_data[6] is tx_data[6]
tx_data[6] = INPUT();


--tx_data[7] is tx_data[7]
tx_data[7] = INPUT();


--o_tx_active is o_tx_active
o_tx_active = OUTPUT(D1_o_tx_active);


--o_tx_serial is o_tx_serial
o_tx_serial = OUTPUT(D1_o_tx_serial);


--o_tx_done is o_tx_done
o_tx_done = OUTPUT(D1_r_tx_done);


--o_rx_dv is o_rx_dv
o_rx_dv = OUTPUT(C1_r_rx_dv);


--rx_data[0] is rx_data[0]
rx_data[0] = OUTPUT(r_data_in[0]);


--rx_data[1] is rx_data[1]
rx_data[1] = OUTPUT(r_data_in[1]);


--rx_data[2] is rx_data[2]
rx_data[2] = OUTPUT(r_data_in[2]);


--rx_data[3] is rx_data[3]
rx_data[3] = OUTPUT(r_data_in[3]);


--rx_data[4] is rx_data[4]
rx_data[4] = OUTPUT(r_data_in[4]);


--rx_data[5] is rx_data[5]
rx_data[5] = OUTPUT(r_data_in[5]);


--rx_data[6] is rx_data[6]
rx_data[6] = OUTPUT(r_data_in[6]);


--rx_data[7] is rx_data[7]
rx_data[7] = OUTPUT(r_data_in[7]);


--r_status[0] is r_status[0]
--register power-up is low

r_status[0] = DFFEAS(r_sm_main.s_get_fifo_data, i_clk, i_rst,  ,  ,  ,  ,  ,  );


--r_status[1] is r_status[1]
--register power-up is low

r_status[1] = DFFEAS(A1L128, i_clk, i_rst,  ,  ,  ,  ,  ,  );


--r_status[2] is r_status[2]
--register power-up is low

r_status[2] = DFFEAS(VCC, i_clk, i_rst,  ,  ,  ,  ,  ,  );


--r_status[3] is r_status[3]
--register power-up is low

r_status[3] = DFFEAS(VCC, i_clk, i_rst,  ,  ,  ,  ,  ,  );


--B1L6 is fifo:fifo_rx|Equal2~0
B1L6 = (!B1_r_fifo_count[0] & (!B1_r_fifo_count[2] & !B1_r_fifo_count[4]));


--B1L7 is fifo:fifo_rx|Equal2~1
B1L7 = (B1_r_fifo_count[3] & (B1_r_fifo_count[1] & B1L6));


--B1L35Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[9]
--register power-up is low

B1L35Q = DFFEAS(r_fifo_rx_wr_data[0], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L36Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[10]
--register power-up is low

B1L36Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L27Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[1]
--register power-up is low

B1L27Q = DFFEAS(B1_r_wr_index[0], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L29Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[3]
--register power-up is low

B1L29Q = DFFEAS(B1_r_wr_index[1], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L30Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[4]
--register power-up is low

B1L30Q = DFFEAS(B1L70, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L28Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[2]
--register power-up is low

B1L28Q = DFFEAS(B1L68, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L51 is fifo:fifo_rx|r_fifo_data~13
B1L51 = (B1L27Q & (B1L28Q & (B1L29Q $ (!B1L30Q)))) # (!B1L27Q & (!B1L28Q & (B1L29Q $ (!B1L30Q))));


--B1L26Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[0]
--register power-up is low

B1L26Q = DFFEAS(B1L62, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L31Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[5]
--register power-up is low

B1L31Q = DFFEAS(B1_r_wr_index[2], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L33Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[7]
--register power-up is low

B1L33Q = DFFEAS(B1_r_wr_index[3], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L34Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[8]
--register power-up is low

B1L34Q = DFFEAS(B1L73, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L32Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[6]
--register power-up is low

B1L32Q = DFFEAS(B1L71, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L52 is fifo:fifo_rx|r_fifo_data~14
B1L52 = (B1L31Q & (B1L32Q & (B1L33Q $ (!B1L34Q)))) # (!B1L31Q & (!B1L32Q & (B1L33Q $ (!B1L34Q))));


--B1L53 is fifo:fifo_rx|r_fifo_data~15
B1L53 = (B1L51 & (B1L26Q & B1L52));


--B1L54 is fifo:fifo_rx|r_fifo_data~16
B1L54 = (B1L36Q & ((B1L53 & (B1L35Q)) # (!B1L53 & ((F1_ram_block1a0))))) # (!B1L36Q & (B1L35Q));


--B1L37Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[11]
--register power-up is low

B1L37Q = DFFEAS(r_fifo_rx_wr_data[1], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L38Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[12]
--register power-up is low

B1L38Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L55 is fifo:fifo_rx|r_fifo_data~17
B1L55 = (B1L38Q & ((B1L53 & (B1L37Q)) # (!B1L53 & ((F1_ram_block1a1))))) # (!B1L38Q & (B1L37Q));


--B1L39Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[13]
--register power-up is low

B1L39Q = DFFEAS(r_fifo_rx_wr_data[2], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L40Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[14]
--register power-up is low

B1L40Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L56 is fifo:fifo_rx|r_fifo_data~18
B1L56 = (B1L40Q & ((B1L53 & (B1L39Q)) # (!B1L53 & ((F1_ram_block1a2))))) # (!B1L40Q & (B1L39Q));


--B1L41Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[15]
--register power-up is low

B1L41Q = DFFEAS(r_fifo_rx_wr_data[3], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L42Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[16]
--register power-up is low

B1L42Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L57 is fifo:fifo_rx|r_fifo_data~19
B1L57 = (B1L42Q & ((B1L53 & (B1L41Q)) # (!B1L53 & ((F1_ram_block1a3))))) # (!B1L42Q & (B1L41Q));


--B1L43Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[17]
--register power-up is low

B1L43Q = DFFEAS(r_fifo_rx_wr_data[4], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L44Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[18]
--register power-up is low

B1L44Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L58 is fifo:fifo_rx|r_fifo_data~20
B1L58 = (B1L44Q & ((B1L53 & (B1L43Q)) # (!B1L53 & ((F1_ram_block1a4))))) # (!B1L44Q & (B1L43Q));


--B1L45Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[19]
--register power-up is low

B1L45Q = DFFEAS(r_fifo_rx_wr_data[5], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L46Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[20]
--register power-up is low

B1L46Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L59 is fifo:fifo_rx|r_fifo_data~21
B1L59 = (B1L46Q & ((B1L53 & (B1L45Q)) # (!B1L53 & ((F1_ram_block1a5))))) # (!B1L46Q & (B1L45Q));


--B1L47Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[21]
--register power-up is low

B1L47Q = DFFEAS(r_fifo_rx_wr_data[6], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L48Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[22]
--register power-up is low

B1L48Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L60 is fifo:fifo_rx|r_fifo_data~22
B1L60 = (B1L48Q & ((B1L53 & (B1L47Q)) # (!B1L53 & ((F1_ram_block1a6))))) # (!B1L48Q & (B1L47Q));


--B1L49Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[23]
--register power-up is low

B1L49Q = DFFEAS(r_fifo_rx_wr_data[7], i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L50Q is fifo:fifo_rx|r_fifo_data_rtl_0_bypass[24]
--register power-up is low

B1L50Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L61 is fifo:fifo_rx|r_fifo_data~23
B1L61 = (B1L50Q & ((B1L53 & (B1L49Q)) # (!B1L53 & ((F1_ram_block1a7))))) # (!B1L50Q & (B1L49Q));


--B1L8 is fifo:fifo_rx|Equal3~0
B1L8 = (B1L6 & (!B1_r_fifo_count[3] & !B1_r_fifo_count[1]));


--B2L6 is fifo:fifo_tx|Equal3~0
B2L6 = (!B2_r_fifo_count[0] & (!B2_r_fifo_count[2] & !B2_r_fifo_count[4]));


--B2L4 is fifo:fifo_tx|Equal2~0
B2L4 = ((!B2L6) # (!B2_r_fifo_count[1])) # (!B2_r_fifo_count[3]);


--B2L26Q is fifo:fifo_tx|r_fifo_data_rtl_0_bypass[10]
--register power-up is low

B2L26Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2L34 is fifo:fifo_tx|r_fifo_data~13
B2L34 = (B2L26Q & G1_ram_block1a0);


--B2L27Q is fifo:fifo_tx|r_fifo_data_rtl_0_bypass[12]
--register power-up is low

B2L27Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2L35 is fifo:fifo_tx|r_fifo_data~14
B2L35 = (B2L27Q & G1_ram_block1a1);


--B2L28Q is fifo:fifo_tx|r_fifo_data_rtl_0_bypass[14]
--register power-up is low

B2L28Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2L36 is fifo:fifo_tx|r_fifo_data~15
B2L36 = (B2L28Q & G1_ram_block1a2);


--B2L29Q is fifo:fifo_tx|r_fifo_data_rtl_0_bypass[16]
--register power-up is low

B2L29Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2L37 is fifo:fifo_tx|r_fifo_data~16
B2L37 = (B2L29Q & G1_ram_block1a3);


--B2L30Q is fifo:fifo_tx|r_fifo_data_rtl_0_bypass[18]
--register power-up is low

B2L30Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2L38 is fifo:fifo_tx|r_fifo_data~17
B2L38 = (B2L30Q & G1_ram_block1a4);


--B2L31Q is fifo:fifo_tx|r_fifo_data_rtl_0_bypass[20]
--register power-up is low

B2L31Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2L39 is fifo:fifo_tx|r_fifo_data~18
B2L39 = (B2L31Q & G1_ram_block1a5);


--B2L32Q is fifo:fifo_tx|r_fifo_data_rtl_0_bypass[22]
--register power-up is low

B2L32Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2L40 is fifo:fifo_tx|r_fifo_data~19
B2L40 = (B2L32Q & G1_ram_block1a6);


--B2L33Q is fifo:fifo_tx|r_fifo_data_rtl_0_bypass[24]
--register power-up is low

B2L33Q = DFFEAS(VCC, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2L41 is fifo:fifo_tx|r_fifo_data~20
B2L41 = (B2L33Q & G1_ram_block1a7);


--B2L7 is fifo:fifo_tx|Equal3~1
B2L7 = (B2L6 & (!B2_r_fifo_count[3] & !B2_r_fifo_count[1]));


--D1_o_tx_active is uart_tx:transmitter|o_tx_active
--register power-up is low

D1_o_tx_active = DFFEAS(D1L74, i_clk,  ,  ,  ,  ,  ,  ,  );


--D1_o_tx_serial is uart_tx:transmitter|o_tx_serial
--register power-up is low

D1_o_tx_serial = DFFEAS(D1L76, i_clk,  ,  ,  ,  ,  ,  ,  );


--D1_r_tx_done is uart_tx:transmitter|r_tx_done
--register power-up is low

D1_r_tx_done = DFFEAS(D1L79, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1_r_rx_dv is uart_rx:receiver|r_rx_dv
--register power-up is low

C1_r_rx_dv = DFFEAS(C1L94, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_data_in[0] is r_data_in[0]
--register power-up is low

r_data_in[0] = DFFEAS(A1L76, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_data_in[1] is r_data_in[1]
--register power-up is low

r_data_in[1] = DFFEAS(A1L78, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_data_in[2] is r_data_in[2]
--register power-up is low

r_data_in[2] = DFFEAS(A1L80, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_data_in[3] is r_data_in[3]
--register power-up is low

r_data_in[3] = DFFEAS(A1L82, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_data_in[4] is r_data_in[4]
--register power-up is low

r_data_in[4] = DFFEAS(A1L84, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_data_in[5] is r_data_in[5]
--register power-up is low

r_data_in[5] = DFFEAS(A1L86, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_data_in[6] is r_data_in[6]
--register power-up is low

r_data_in[6] = DFFEAS(A1L88, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_data_in[7] is r_data_in[7]
--register power-up is low

r_data_in[7] = DFFEAS(A1L90, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_sm_main.s_get_fifo_data is r_sm_main.s_get_fifo_data
--register power-up is low

r_sm_main.s_get_fifo_data = DFFEAS(A1L121, i_clk, i_rst,  ,  ,  ,  ,  ,  );


--i_clk is i_clk
i_clk = INPUT();


--i_rst is i_rst
i_rst = INPUT();


--i_rst_sync is i_rst_sync
i_rst_sync = INPUT();


--r_fifo_rx_wr_en is r_fifo_rx_wr_en
--register power-up is low

r_fifo_rx_wr_en = DFFEAS(A1L119, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L62 is fifo:fifo_rx|r_fifo_data~24
B1L62 = (i_rst_sync & r_fifo_rx_wr_en);


--r_fifo_rx_wr_data[0] is r_fifo_rx_wr_data[0]
--register power-up is low

r_fifo_rx_wr_data[0] = DFFEAS(C1_r_rx_byte[0], i_clk,  ,  , A1L110,  ,  ,  ,  );


--B1_r_wr_index[0] is fifo:fifo_rx|r_wr_index[0]
--register power-up is low

B1_r_wr_index[0] = DFFEAS(B1L82, i_clk,  ,  , B1L80,  ,  ,  ,  );


--B1_r_wr_index[1] is fifo:fifo_rx|r_wr_index[1]
--register power-up is low

B1_r_wr_index[1] = DFFEAS(B1L83, i_clk,  ,  , B1L80,  ,  ,  ,  );


--B1_r_wr_index[2] is fifo:fifo_rx|r_wr_index[2]
--register power-up is low

B1_r_wr_index[2] = DFFEAS(B1L84, i_clk,  ,  , B1L80,  ,  ,  ,  );


--B1_r_wr_index[3] is fifo:fifo_rx|r_wr_index[3]
--register power-up is low

B1_r_wr_index[3] = DFFEAS(B1L85, i_clk,  ,  , B1L80,  ,  ,  ,  );


--B1_r_rd_index[0] is fifo:fifo_rx|r_rd_index[0]
--register power-up is low

B1_r_rd_index[0] = DFFEAS(B1L68, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L68 is fifo:fifo_rx|r_rd_index~0
B1L68 = (i_rst_sync & (B1L8 $ (!B1_r_rd_index[0])));


--B1_r_rd_index[1] is fifo:fifo_rx|r_rd_index[1]
--register power-up is low

B1_r_rd_index[1] = DFFEAS(B1L70, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1_r_rd_index[3] is fifo:fifo_rx|r_rd_index[3]
--register power-up is low

B1_r_rd_index[3] = DFFEAS(B1L73, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1_r_rd_index[2] is fifo:fifo_rx|r_rd_index[2]
--register power-up is low

B1_r_rd_index[2] = DFFEAS(B1L71, i_clk,  ,  ,  ,  ,  ,  ,  );


--B1L5 is fifo:fifo_rx|Equal1~0
B1L5 = (B1_r_rd_index[0] & (B1_r_rd_index[3] & (!B1_r_rd_index[1] & !B1_r_rd_index[2])));


--B1L69 is fifo:fifo_rx|r_rd_index~1
B1L69 = (B1L8 & (B1_r_rd_index[1])) # (!B1L8 & (!B1L5 & (B1_r_rd_index[1] $ (B1_r_rd_index[0]))));


--B1L70 is fifo:fifo_rx|r_rd_index~2
B1L70 = (i_rst_sync & B1L69);


--B1L3 is fifo:fifo_rx|Add3~0
B1L3 = B1_r_rd_index[2] $ (((B1_r_rd_index[0] & B1_r_rd_index[1])));


--B1L71 is fifo:fifo_rx|r_rd_index~3
B1L71 = (i_rst_sync & ((B1L8 & (B1_r_rd_index[2])) # (!B1L8 & ((B1L3)))));


--B1L4 is fifo:fifo_rx|Add3~1
B1L4 = B1_r_rd_index[3] $ (((B1_r_rd_index[0] & (B1_r_rd_index[1] & B1_r_rd_index[2]))));


--B1L72 is fifo:fifo_rx|r_rd_index~4
B1L72 = (i_rst_sync & (B1L4 & (!B1L8 & !B1L5)));


--B1L73 is fifo:fifo_rx|r_rd_index~5
B1L73 = (B1L72) # ((B1L8 & (i_rst_sync & B1_r_rd_index[3])));


--r_fifo_rx_wr_data[1] is r_fifo_rx_wr_data[1]
--register power-up is low

r_fifo_rx_wr_data[1] = DFFEAS(C1_r_rx_byte[1], i_clk,  ,  , A1L110,  ,  ,  ,  );


--r_fifo_rx_wr_data[2] is r_fifo_rx_wr_data[2]
--register power-up is low

r_fifo_rx_wr_data[2] = DFFEAS(C1_r_rx_byte[2], i_clk,  ,  , A1L110,  ,  ,  ,  );


--r_fifo_rx_wr_data[3] is r_fifo_rx_wr_data[3]
--register power-up is low

r_fifo_rx_wr_data[3] = DFFEAS(C1_r_rx_byte[3], i_clk,  ,  , A1L110,  ,  ,  ,  );


--r_fifo_rx_wr_data[4] is r_fifo_rx_wr_data[4]
--register power-up is low

r_fifo_rx_wr_data[4] = DFFEAS(C1_r_rx_byte[4], i_clk,  ,  , A1L110,  ,  ,  ,  );


--r_fifo_rx_wr_data[5] is r_fifo_rx_wr_data[5]
--register power-up is low

r_fifo_rx_wr_data[5] = DFFEAS(C1_r_rx_byte[5], i_clk,  ,  , A1L110,  ,  ,  ,  );


--r_fifo_rx_wr_data[6] is r_fifo_rx_wr_data[6]
--register power-up is low

r_fifo_rx_wr_data[6] = DFFEAS(C1_r_rx_byte[6], i_clk,  ,  , A1L110,  ,  ,  ,  );


--r_fifo_rx_wr_data[7] is r_fifo_rx_wr_data[7]
--register power-up is low

r_fifo_rx_wr_data[7] = DFFEAS(C1_r_rx_byte[7], i_clk,  ,  , A1L110,  ,  ,  ,  );


--r_tx_dv is r_tx_dv
--register power-up is low

r_tx_dv = DFFEAS(A1L144, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2L12 is fifo:fifo_tx|r_fifo_count[0]~13
B2L12 = (r_tx_dv) # (!i_rst_sync);


--B2_r_rd_index[0] is fifo:fifo_tx|r_rd_index[0]
--register power-up is low

B2_r_rd_index[0] = DFFEAS(B2L47, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2L47 is fifo:fifo_tx|r_rd_index~0
B2L47 = (i_rst_sync & (B2_r_rd_index[0] $ (((!B2L7 & r_tx_dv)))));


--B2L48 is fifo:fifo_tx|r_rd_index~1
B2L48 = (i_rst_sync & ((B2L7) # (!r_tx_dv)));


--B2_r_rd_index[3] is fifo:fifo_tx|r_rd_index[3]
--register power-up is low

B2_r_rd_index[3] = DFFEAS(B2L53, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2_r_rd_index[1] is fifo:fifo_tx|r_rd_index[1]
--register power-up is low

B2_r_rd_index[1] = DFFEAS(B2L50, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2_r_rd_index[2] is fifo:fifo_tx|r_rd_index[2]
--register power-up is low

B2_r_rd_index[2] = DFFEAS(B2L52, i_clk,  ,  ,  ,  ,  ,  ,  );


--B2L3 is fifo:fifo_tx|Equal1~0
B2L3 = (B2_r_rd_index[0] & (B2_r_rd_index[3] & (!B2_r_rd_index[1] & !B2_r_rd_index[2])));


--B2L49 is fifo:fifo_tx|r_rd_index~2
B2L49 = (i_rst_sync & (r_tx_dv & (!B2L7 & !B2L3)));


--B2L50 is fifo:fifo_tx|r_rd_index~3
B2L50 = (B2_r_rd_index[1] & ((B2L48) # ((B2L49 & !B2_r_rd_index[0])))) # (!B2_r_rd_index[1] & (((B2L49 & B2_r_rd_index[0]))));


--B2L51 is fifo:fifo_tx|r_rd_index~4
B2L51 = (i_rst_sync & (r_tx_dv & !B2L7));


--B2L1 is fifo:fifo_tx|Add3~0
B2L1 = B2_r_rd_index[2] $ (((B2_r_rd_index[0] & B2_r_rd_index[1])));


--B2L52 is fifo:fifo_tx|r_rd_index~5
B2L52 = (B2L51 & ((B2L1) # ((B2_r_rd_index[2] & B2L48)))) # (!B2L51 & (B2_r_rd_index[2] & (B2L48)));


--B2L2 is fifo:fifo_tx|Add3~1
B2L2 = B2_r_rd_index[3] $ (((B2_r_rd_index[0] & (B2_r_rd_index[1] & B2_r_rd_index[2]))));


--B2L53 is fifo:fifo_tx|r_rd_index~6
B2L53 = (B2_r_rd_index[3] & ((B2L48) # ((B2L49 & B2L2)))) # (!B2_r_rd_index[3] & (B2L49 & (B2L2)));


--D1_r_sm_main.s_tx_start_bit is uart_tx:transmitter|r_sm_main.s_tx_start_bit
--register power-up is low

D1_r_sm_main.s_tx_start_bit = DFFEAS(D1L87, i_clk,  ,  ,  ,  ,  ,  ,  );


--D1_r_sm_main.s_tx_data_bits is uart_tx:transmitter|r_sm_main.s_tx_data_bits
--register power-up is low

D1_r_sm_main.s_tx_data_bits = DFFEAS(D1L89, i_clk,  ,  ,  ,  ,  ,  ,  );


--D1_r_sm_main.s_tx_stop_bit is uart_tx:transmitter|r_sm_main.s_tx_stop_bit
--register power-up is low

D1_r_sm_main.s_tx_stop_bit = DFFEAS(D1L62, i_clk,  ,  ,  ,  ,  ,  ,  );


--D1L74 is uart_tx:transmitter|Selector0~0
D1L74 = (D1_r_sm_main.s_tx_start_bit) # ((D1_o_tx_active & ((D1_r_sm_main.s_tx_data_bits) # (D1_r_sm_main.s_tx_stop_bit))));


--D1_r_tx_data[6] is uart_tx:transmitter|r_tx_data[6]
--register power-up is low

D1_r_tx_data[6] = DFFEAS(r_tx_data[6], i_clk,  ,  , D1L88,  ,  ,  ,  );


--D1_r_bit_index[1] is uart_tx:transmitter|r_bit_index[1]
--register power-up is low

D1_r_bit_index[1] = DFFEAS(D1L83, i_clk,  ,  ,  ,  ,  ,  ,  );


--D1_r_tx_data[5] is uart_tx:transmitter|r_tx_data[5]
--register power-up is low

D1_r_tx_data[5] = DFFEAS(r_tx_data[5], i_clk,  ,  , D1L88,  ,  ,  ,  );


--D1_r_bit_index[0] is uart_tx:transmitter|r_bit_index[0]
--register power-up is low

D1_r_bit_index[0] = DFFEAS(D1L85, i_clk,  ,  ,  ,  ,  ,  ,  );


--D1_r_tx_data[4] is uart_tx:transmitter|r_tx_data[4]
--register power-up is low

D1_r_tx_data[4] = DFFEAS(r_tx_data[4], i_clk,  ,  , D1L88,  ,  ,  ,  );


--D1L5 is uart_tx:transmitter|Mux0~0
D1L5 = (D1_r_bit_index[1] & (((D1_r_bit_index[0])))) # (!D1_r_bit_index[1] & ((D1_r_bit_index[0] & (D1_r_tx_data[5])) # (!D1_r_bit_index[0] & ((D1_r_tx_data[4])))));


--D1_r_tx_data[7] is uart_tx:transmitter|r_tx_data[7]
--register power-up is low

D1_r_tx_data[7] = DFFEAS(r_tx_data[7], i_clk,  ,  , D1L88,  ,  ,  ,  );


--D1L6 is uart_tx:transmitter|Mux0~1
D1L6 = (D1_r_bit_index[1] & ((D1L5 & ((D1_r_tx_data[7]))) # (!D1L5 & (D1_r_tx_data[6])))) # (!D1_r_bit_index[1] & (((D1L5))));


--D1_r_bit_index[2] is uart_tx:transmitter|r_bit_index[2]
--register power-up is low

D1_r_bit_index[2] = DFFEAS(D1L81, i_clk,  ,  ,  ,  ,  ,  ,  );


--D1_r_sm_main.s_idle is uart_tx:transmitter|r_sm_main.s_idle
--register power-up is low

D1_r_sm_main.s_idle = DFFEAS(D1L86, i_clk,  ,  ,  ,  ,  ,  ,  );


--D1_r_tx_data[2] is uart_tx:transmitter|r_tx_data[2]
--register power-up is low

D1_r_tx_data[2] = DFFEAS(r_tx_data[2], i_clk,  ,  , D1L88,  ,  ,  ,  );


--D1_r_tx_data[1] is uart_tx:transmitter|r_tx_data[1]
--register power-up is low

D1_r_tx_data[1] = DFFEAS(r_tx_data[1], i_clk,  ,  , D1L88,  ,  ,  ,  );


--D1_r_tx_data[0] is uart_tx:transmitter|r_tx_data[0]
--register power-up is low

D1_r_tx_data[0] = DFFEAS(r_tx_data[0], i_clk,  ,  , D1L88,  ,  ,  ,  );


--D1L7 is uart_tx:transmitter|Mux0~2
D1L7 = (D1_r_bit_index[1] & (((D1_r_bit_index[0])))) # (!D1_r_bit_index[1] & ((D1_r_bit_index[0] & (D1_r_tx_data[1])) # (!D1_r_bit_index[0] & ((D1_r_tx_data[0])))));


--D1_r_tx_data[3] is uart_tx:transmitter|r_tx_data[3]
--register power-up is low

D1_r_tx_data[3] = DFFEAS(r_tx_data[3], i_clk,  ,  , D1L88,  ,  ,  ,  );


--D1L8 is uart_tx:transmitter|Mux0~3
D1L8 = (D1_r_bit_index[1] & ((D1L7 & ((D1_r_tx_data[3]))) # (!D1L7 & (D1_r_tx_data[2])))) # (!D1_r_bit_index[1] & (((D1L7))));


--D1L75 is uart_tx:transmitter|Selector1~2
D1L75 = (D1_r_sm_main.s_tx_stop_bit) # ((D1_r_sm_main.s_tx_data_bits & (D1L8 & !D1_r_bit_index[2])));


--D1_r_sm_main.s_cleanup is uart_tx:transmitter|r_sm_main.s_cleanup
--register power-up is low

D1_r_sm_main.s_cleanup = DFFEAS(D1L63, i_clk,  ,  ,  ,  ,  ,  ,  );


--D1L76 is uart_tx:transmitter|Selector1~3
D1L76 = (D1L77) # ((D1L75) # ((D1_o_tx_serial & D1_r_sm_main.s_cleanup)));


--D1L78 is uart_tx:transmitter|Selector2~0
D1L78 = (D1_r_tx_done & ((D1_r_sm_main.s_tx_start_bit) # ((D1_r_sm_main.s_tx_data_bits) # (D1_r_sm_main.s_tx_stop_bit))));


--D1L1 is uart_tx:transmitter|LessThan1~0
D1L1 = (!D1_r_clk_count[10] & !D1_r_clk_count[11]);


--D1L2 is uart_tx:transmitter|LessThan1~1
D1L2 = ((!D1_r_clk_count[5] & ((!D1_r_clk_count[4]) # (!D1_r_clk_count[3])))) # (!D1_r_clk_count[6]);


--D1L3 is uart_tx:transmitter|LessThan1~2
D1L3 = (!D1_r_clk_count[11] & (!D1_r_clk_count[7] & (!D1_r_clk_count[8] & !D1_r_clk_count[9])));


--D1L4 is uart_tx:transmitter|LessThan1~3
D1L4 = (D1L1) # (((D1L2 & D1L3)) # (!D1_r_clk_count[12]));


--D1L79 is uart_tx:transmitter|Selector2~1
D1L79 = (D1_r_sm_main.s_cleanup) # ((D1L78) # ((D1_r_sm_main.s_tx_stop_bit & !D1L4)));


--C1L11 is uart_rx:receiver|LessThan1~0
C1L11 = ((!C1_r_clk_count[5] & ((!C1_r_clk_count[4]) # (!C1_r_clk_count[3])))) # (!C1_r_clk_count[6]);


--C1_r_sm_main.s_rx_stop_bit is uart_rx:receiver|r_sm_main.s_rx_stop_bit
--register power-up is low

C1_r_sm_main.s_rx_stop_bit = DFFEAS(C1L91, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1L92 is uart_rx:receiver|r_sm_main~7
C1L92 = (C1L13 & C1_r_sm_main.s_rx_stop_bit);


--C1_r_sm_main.s_rx_start_bit is uart_rx:receiver|r_sm_main.s_rx_start_bit
--register power-up is low

C1_r_sm_main.s_rx_start_bit = DFFEAS(C1L103, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1_r_sm_main.s_rx_data_bits is uart_rx:receiver|r_sm_main.s_rx_data_bits
--register power-up is low

C1_r_sm_main.s_rx_data_bits = DFFEAS(C1L105, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1L93 is uart_rx:receiver|Selector0~0
C1L93 = (!C1_r_sm_main.s_rx_stop_bit & !C1_r_sm_main.s_rx_data_bits);


--C1L94 is uart_rx:receiver|Selector0~1
C1L94 = (C1L92) # ((C1_r_rx_dv & ((C1_r_sm_main.s_rx_start_bit) # (!C1L93))));


--r_bit_index[0] is r_bit_index[0]
--register power-up is low

r_bit_index[0] = DFFEAS(A1L68, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_fifo_data_in[6] is r_fifo_data_in[6]
--register power-up is low

r_fifo_data_in[6] = DFFEAS(A1L105, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_fifo_data_in[7] is r_fifo_data_in[7]
--register power-up is low

r_fifo_data_in[7] = DFFEAS(A1L107, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_fifo_data_in[5] is r_fifo_data_in[5]
--register power-up is low

r_fifo_data_in[5] = DFFEAS(A1L103, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_fifo_data_in[4] is r_fifo_data_in[4]
--register power-up is low

r_fifo_data_in[4] = DFFEAS(A1L101, i_clk,  ,  ,  ,  ,  ,  ,  );


--A1L5 is Equal0~0
A1L5 = (r_fifo_data_in[6] & (!r_fifo_data_in[7] & (!r_fifo_data_in[5] & !r_fifo_data_in[4])));


--r_fifo_data_in[3] is r_fifo_data_in[3]
--register power-up is low

r_fifo_data_in[3] = DFFEAS(A1L99, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_fifo_data_in[2] is r_fifo_data_in[2]
--register power-up is low

r_fifo_data_in[2] = DFFEAS(A1L97, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_fifo_data_in[1] is r_fifo_data_in[1]
--register power-up is low

r_fifo_data_in[1] = DFFEAS(A1L95, i_clk,  ,  ,  ,  ,  ,  ,  );


--A1L6 is Equal0~1
A1L6 = (A1L5 & (r_fifo_data_in[3] & (!r_fifo_data_in[2] & !r_fifo_data_in[1])));


--A1L75 is r_data_in[0]~0
A1L75 = (r_sm_main.s_get_fifo_data & i_rst);


--r_bit_index[1] is r_bit_index[1]
--register power-up is low

r_bit_index[1] = DFFEAS(A1L70, i_clk,  ,  ,  ,  ,  ,  ,  );


--r_bit_index[2] is r_bit_index[2]
--register power-up is low

r_bit_index[2] = DFFEAS(A1L72, i_clk,  ,  ,  ,  ,  ,  ,  );


--A1L1 is Decoder0~0
A1L1 = (A1L6 & (A1L75 & (!r_bit_index[1] & !r_bit_index[2])));


--r_fifo_data_in[0] is r_fifo_data_in[0]
--register power-up is low

r_fifo_data_in[0] = DFFEAS(A1L93, i_clk,  ,  ,  ,  ,  ,  ,  );


--A1L7 is Equal0~2
A1L7 = (A1L6 & !r_fifo_data_in[0]);


--A1L76 is r_data_in[0]~1
A1L76 = (r_bit_index[0] & (r_data_in[0])) # (!r_bit_index[0] & ((A1L1 & ((!A1L7))) # (!A1L1 & (r_data_in[0]))));


--A1L78 is r_data_in[1]~2
A1L78 = (r_bit_index[0] & ((A1L1 & ((!A1L7))) # (!A1L1 & (r_data_in[1])))) # (!r_bit_index[0] & (r_data_in[1]));


--A1L2 is Decoder0~1
A1L2 = (A1L6 & (r_bit_index[1] & (A1L75 & !r_bit_index[2])));


--A1L80 is r_data_in[2]~3
A1L80 = (r_bit_index[0] & (r_data_in[2])) # (!r_bit_index[0] & ((A1L2 & ((!A1L7))) # (!A1L2 & (r_data_in[2]))));


--A1L82 is r_data_in[3]~4
A1L82 = (r_bit_index[0] & ((A1L2 & ((!A1L7))) # (!A1L2 & (r_data_in[3])))) # (!r_bit_index[0] & (r_data_in[3]));


--A1L3 is Decoder0~2
A1L3 = (A1L6 & (r_bit_index[2] & (A1L75 & !r_bit_index[0])));


--A1L84 is r_data_in[4]~5
A1L84 = (r_bit_index[1] & (r_data_in[4])) # (!r_bit_index[1] & ((A1L3 & ((!A1L7))) # (!A1L3 & (r_data_in[4]))));


--A1L4 is Decoder0~3
A1L4 = (A1L6 & (r_bit_index[0] & (r_bit_index[2] & A1L75)));


--A1L86 is r_data_in[5]~6
A1L86 = (r_bit_index[1] & (r_data_in[5])) # (!r_bit_index[1] & ((A1L4 & ((!A1L7))) # (!A1L4 & (r_data_in[5]))));


--A1L88 is r_data_in[6]~7
A1L88 = (r_bit_index[1] & ((A1L3 & ((!A1L7))) # (!A1L3 & (r_data_in[6])))) # (!r_bit_index[1] & (r_data_in[6]));


--A1L90 is r_data_in[7]~8
A1L90 = (r_bit_index[1] & ((A1L4 & ((!A1L7))) # (!A1L4 & (r_data_in[7])))) # (!r_bit_index[1] & (r_data_in[7]));


--r_sm_main.s_idle is r_sm_main.s_idle
--register power-up is low

r_sm_main.s_idle = DFFEAS(A1L123, i_clk, i_rst,  ,  ,  ,  ,  ,  );


--A1L121 is r_sm_main.s_get_fifo_data~0
A1L121 = (r_sm_main.s_get_fifo_data) # ((!B1L8 & !r_sm_main.s_idle));


--A1L119 is r_fifo_rx_wr_en~0
A1L119 = (C1_r_rx_dv & ((r_fifo_rx_wr_en) # (!B1L7)));


--C1_r_rx_byte[0] is uart_rx:receiver|r_rx_byte[0]
--register power-up is low

C1_r_rx_byte[0] = DFFEAS(C1L65, i_clk,  ,  ,  ,  ,  ,  ,  );


--A1L110 is r_fifo_rx_wr_data[0]~0
A1L110 = (C1_r_rx_dv & (((!B1L6) # (!B1_r_fifo_count[1])) # (!B1_r_fifo_count[3])));


--B1L82 is fifo:fifo_rx|r_wr_index~0
B1L82 = (!B1_r_wr_index[0] & i_rst_sync);


--B1L79 is fifo:fifo_rx|r_wr_index[3]~1
B1L79 = (B1_r_fifo_count[3] & B1_r_fifo_count[1]);


--B1L80 is fifo:fifo_rx|r_wr_index[3]~2
B1L80 = ((r_fifo_rx_wr_en & ((!B1L79) # (!B1L6)))) # (!i_rst_sync);


--B1L81 is fifo:fifo_rx|r_wr_index[3]~3
B1L81 = (B1_r_wr_index[1]) # ((B1_r_wr_index[2]) # ((!B1_r_wr_index[3]) # (!B1_r_wr_index[0])));


--B1L83 is fifo:fifo_rx|r_wr_index~4
B1L83 = (i_rst_sync & (B1L81 & (B1_r_wr_index[0] $ (B1_r_wr_index[1]))));


--B1L1 is fifo:fifo_rx|Add2~0
B1L1 = B1_r_wr_index[2] $ (((B1_r_wr_index[0] & B1_r_wr_index[1])));


--B1L84 is fifo:fifo_rx|r_wr_index~5
B1L84 = (i_rst_sync & (B1L81 & B1L1));


--B1L2 is fifo:fifo_rx|Add2~1
B1L2 = B1_r_wr_index[3] $ (((B1_r_wr_index[0] & (B1_r_wr_index[1] & B1_r_wr_index[2]))));


--B1L85 is fifo:fifo_rx|r_wr_index~6
B1L85 = (i_rst_sync & (B1L81 & B1L2));


--C1_r_rx_byte[1] is uart_rx:receiver|r_rx_byte[1]
--register power-up is low

C1_r_rx_byte[1] = DFFEAS(C1L67, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1_r_rx_byte[2] is uart_rx:receiver|r_rx_byte[2]
--register power-up is low

C1_r_rx_byte[2] = DFFEAS(C1L69, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1_r_rx_byte[3] is uart_rx:receiver|r_rx_byte[3]
--register power-up is low

C1_r_rx_byte[3] = DFFEAS(C1L71, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1_r_rx_byte[4] is uart_rx:receiver|r_rx_byte[4]
--register power-up is low

C1_r_rx_byte[4] = DFFEAS(C1L74, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1_r_rx_byte[5] is uart_rx:receiver|r_rx_byte[5]
--register power-up is low

C1_r_rx_byte[5] = DFFEAS(C1L76, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1_r_rx_byte[6] is uart_rx:receiver|r_rx_byte[6]
--register power-up is low

C1_r_rx_byte[6] = DFFEAS(C1L78, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1_r_rx_byte[7] is uart_rx:receiver|r_rx_byte[7]
--register power-up is low

C1_r_rx_byte[7] = DFFEAS(C1L81, i_clk,  ,  ,  ,  ,  ,  ,  );


--A1L144 is r_tx_dv~0
A1L144 = (!D1_r_tx_done & (((B2_r_fifo_count[3]) # (B2_r_fifo_count[1])) # (!B2L6)));


--D1L87 is uart_tx:transmitter|Selector20~0
D1L87 = (D1_r_sm_main.s_tx_start_bit & ((D1L4) # ((r_tx_dv & !D1_r_sm_main.s_idle)))) # (!D1_r_sm_main.s_tx_start_bit & (((r_tx_dv & !D1_r_sm_main.s_idle))));


--D1L61 is uart_tx:transmitter|r_sm_main.s_tx_stop_bit~0
D1L61 = (D1_r_bit_index[1] & (D1_r_bit_index[0] & (D1_r_bit_index[2] & !D1L4)));


--D1L89 is uart_tx:transmitter|Selector21~0
D1L89 = (D1_r_sm_main.s_tx_start_bit & (((D1_r_sm_main.s_tx_data_bits & !D1L61)) # (!D1L4))) # (!D1_r_sm_main.s_tx_start_bit & (D1_r_sm_main.s_tx_data_bits & ((!D1L61))));


--D1L62 is uart_tx:transmitter|r_sm_main.s_tx_stop_bit~1
D1L62 = (D1_r_sm_main.s_tx_data_bits & ((D1L61) # ((D1_r_sm_main.s_tx_stop_bit & D1L4)))) # (!D1_r_sm_main.s_tx_data_bits & (D1_r_sm_main.s_tx_stop_bit & (D1L4)));


--r_tx_data[6] is r_tx_data[6]
--register power-up is low

r_tx_data[6] = DFFEAS(B2L40, i_clk,  ,  , !B2L7,  ,  ,  ,  );


--D1L88 is uart_tx:transmitter|Selector20~1
D1L88 = (r_tx_dv & !D1_r_sm_main.s_idle);


--D1L82 is uart_tx:transmitter|Selector17~0
D1L82 = (D1_r_sm_main.s_tx_data_bits & (D1_r_bit_index[0])) # (!D1_r_sm_main.s_tx_data_bits & ((D1_r_sm_main.s_idle)));


--D1L83 is uart_tx:transmitter|Selector17~1
D1L83 = (D1_r_sm_main.s_tx_data_bits & (D1_r_bit_index[1] $ (((!D1L4 & D1L82))))) # (!D1_r_sm_main.s_tx_data_bits & (D1_r_bit_index[1] & ((D1L82))));


--r_tx_data[5] is r_tx_data[5]
--register power-up is low

r_tx_data[5] = DFFEAS(B2L39, i_clk,  ,  , !B2L7,  ,  ,  ,  );


--D1L84 is uart_tx:transmitter|Selector18~0
D1L84 = (D1_r_clk_count[12] & (!D1L1 & ((!D1L3) # (!D1L2))));


--D1L85 is uart_tx:transmitter|Selector18~1
D1L85 = (D1_r_sm_main.s_tx_data_bits & (D1_r_bit_index[0] $ (((D1L84))))) # (!D1_r_sm_main.s_tx_data_bits & (D1_r_bit_index[0] & (D1_r_sm_main.s_idle)));


--r_tx_data[4] is r_tx_data[4]
--register power-up is low

r_tx_data[4] = DFFEAS(B2L38, i_clk,  ,  , !B2L7,  ,  ,  ,  );


--r_tx_data[7] is r_tx_data[7]
--register power-up is low

r_tx_data[7] = DFFEAS(B2L41, i_clk,  ,  , !B2L7,  ,  ,  ,  );


--D1L86 is uart_tx:transmitter|Selector19~0
D1L86 = (!D1_r_sm_main.s_cleanup & ((r_tx_dv) # (D1_r_sm_main.s_idle)));


--r_tx_data[2] is r_tx_data[2]
--register power-up is low

r_tx_data[2] = DFFEAS(B2L36, i_clk,  ,  , !B2L7,  ,  ,  ,  );


--r_tx_data[1] is r_tx_data[1]
--register power-up is low

r_tx_data[1] = DFFEAS(B2L35, i_clk,  ,  , !B2L7,  ,  ,  ,  );


--r_tx_data[0] is r_tx_data[0]
--register power-up is low

r_tx_data[0] = DFFEAS(B2L34, i_clk,  ,  , !B2L7,  ,  ,  ,  );


--r_tx_data[3] is r_tx_data[3]
--register power-up is low

r_tx_data[3] = DFFEAS(B2L37, i_clk,  ,  , !B2L7,  ,  ,  ,  );


--D1L63 is uart_tx:transmitter|r_sm_main~7
D1L63 = (!D1L4 & D1_r_sm_main.s_tx_stop_bit);


--D1L53 is uart_tx:transmitter|r_clk_count[12]~35
D1L53 = (!D1L4) # (!D1_r_sm_main.s_idle);


--C1L7 is uart_rx:receiver|Equal0~0
C1L7 = (C1_r_clk_count[3] & (!C1_r_clk_count[4] & (!C1_r_clk_count[7] & !C1_r_clk_count[8])));


--C1L8 is uart_rx:receiver|Equal0~1
C1L8 = (C1_r_clk_count[5] & (C1_r_clk_count[9] & (!C1_r_clk_count[10] & !C1_r_clk_count[6])));


--C1L9 is uart_rx:receiver|Equal0~2
C1L9 = (C1_r_clk_count[11] & (!C1_r_clk_count[12] & (!C1_r_clk_count[1] & !C1_r_clk_count[0])));


--C1L49 is uart_rx:receiver|r_clk_count[9]~39
C1L49 = (C1_r_sm_main.s_rx_start_bit & C1_r_clk_count[2]);


--C1L50 is uart_rx:receiver|r_clk_count[9]~40
C1L50 = (C1L7 & (C1L8 & (C1L9 & C1L49)));


--C1_r_sm_main.s_idle is uart_rx:receiver|r_sm_main.s_idle
--register power-up is low

C1_r_sm_main.s_idle = DFFEAS(C1L102, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1L51 is uart_rx:receiver|r_clk_count[9]~41
C1L51 = (C1L50) # (((C1L13 & !C1L93)) # (!C1_r_sm_main.s_idle));


--C1L10 is uart_rx:receiver|Equal0~3
C1L10 = (C1_r_clk_count[2] & (C1L7 & (C1L8 & C1L9)));


--C1_r_rx_data is uart_rx:receiver|r_rx_data
--register power-up is low

C1_r_rx_data = DFFEAS(C1_r_rx_data_r, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1_r_sm_main.s_cleanup is uart_rx:receiver|r_sm_main.s_cleanup
--register power-up is low

C1_r_sm_main.s_cleanup = DFFEAS(C1L92, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1L52 is uart_rx:receiver|r_clk_count[9]~42
C1L52 = (!C1_r_sm_main.s_cleanup & (((!C1_r_rx_data) # (!C1L10)) # (!C1_r_sm_main.s_rx_start_bit)));


--C1_r_bit_index[0] is uart_rx:receiver|r_bit_index[0]
--register power-up is low

C1_r_bit_index[0] = DFFEAS(C1L101, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1L1 is uart_rx:receiver|Decoder0~0
C1L1 = (C1L13 & C1_r_sm_main.s_rx_data_bits);


--C1_r_bit_index[1] is uart_rx:receiver|r_bit_index[1]
--register power-up is low

C1_r_bit_index[1] = DFFEAS(C1L100, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1_r_bit_index[2] is uart_rx:receiver|r_bit_index[2]
--register power-up is low

C1_r_bit_index[2] = DFFEAS(C1L98, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1L90 is uart_rx:receiver|r_sm_main.s_rx_stop_bit~0
C1L90 = (C1_r_bit_index[0] & (C1L1 & (C1_r_bit_index[1] & C1_r_bit_index[2])));


--C1L91 is uart_rx:receiver|r_sm_main.s_rx_stop_bit~1
C1L91 = (C1L90) # ((C1_r_sm_main.s_rx_stop_bit & !C1L13));


--C1L103 is uart_rx:receiver|Selector18~0
C1L103 = (C1_r_sm_main.s_rx_start_bit & (((!C1_r_sm_main.s_idle & !C1_r_rx_data)) # (!C1L10))) # (!C1_r_sm_main.s_rx_start_bit & (!C1_r_sm_main.s_idle & (!C1_r_rx_data)));


--C1L104 is uart_rx:receiver|Selector19~0
C1L104 = (C1L13 & (C1_r_bit_index[0] & (C1_r_bit_index[1] & C1_r_bit_index[2])));


--C1L105 is uart_rx:receiver|Selector19~1
C1L105 = (C1_r_sm_main.s_rx_data_bits & (((C1L50 & !C1_r_rx_data)) # (!C1L104))) # (!C1_r_sm_main.s_rx_data_bits & (C1L50 & (!C1_r_rx_data)));


--A1L68 is r_bit_index[0]~0
A1L68 = r_bit_index[0] $ (((r_sm_main.s_get_fifo_data & i_rst)));


--A1L70 is r_bit_index[1]~1
A1L70 = r_bit_index[1] $ (((r_sm_main.s_get_fifo_data & (i_rst & r_bit_index[0]))));


--A1L72 is r_bit_index[2]~2
A1L72 = r_bit_index[2] $ (((r_bit_index[0] & (r_bit_index[1] & A1L75))));


--A1L123 is r_sm_main.s_idle~0
A1L123 = (B1_r_fifo_count[3]) # ((B1_r_fifo_count[1]) # ((r_sm_main.s_idle) # (!B1L6)));


--C1L64 is uart_rx:receiver|r_rx_byte[0]~0
C1L64 = (C1_r_bit_index[0]) # ((C1_r_bit_index[1]) # (C1_r_bit_index[2]));


--C1L65 is uart_rx:receiver|r_rx_byte[0]~1
C1L65 = (C1L1 & ((C1L64 & ((C1_r_rx_byte[0]))) # (!C1L64 & (C1_r_rx_data)))) # (!C1L1 & (((C1_r_rx_byte[0]))));


--C1L2 is uart_rx:receiver|Decoder0~1
C1L2 = (C1_r_bit_index[0] & (!C1_r_bit_index[1] & (!C1_r_bit_index[2] & C1L1)));


--C1L67 is uart_rx:receiver|r_rx_byte[1]~2
C1L67 = (C1L2 & (C1_r_rx_data)) # (!C1L2 & ((C1_r_rx_byte[1])));


--C1L3 is uart_rx:receiver|Decoder0~2
C1L3 = (!C1_r_bit_index[0] & (C1_r_bit_index[1] & (!C1_r_bit_index[2] & C1L1)));


--C1L69 is uart_rx:receiver|r_rx_byte[2]~3
C1L69 = (C1L3 & (C1_r_rx_data)) # (!C1L3 & ((C1_r_rx_byte[2])));


--C1L4 is uart_rx:receiver|Decoder0~3
C1L4 = (C1_r_bit_index[0] & (C1_r_bit_index[1] & (!C1_r_bit_index[2] & C1L1)));


--C1L71 is uart_rx:receiver|r_rx_byte[3]~4
C1L71 = (C1L4 & (C1_r_rx_data)) # (!C1L4 & ((C1_r_rx_byte[3])));


--C1L73 is uart_rx:receiver|r_rx_byte[4]~5
C1L73 = (C1_r_bit_index[0]) # ((C1_r_bit_index[1]) # (!C1_r_bit_index[2]));


--C1L74 is uart_rx:receiver|r_rx_byte[4]~6
C1L74 = (C1L1 & ((C1L73 & ((C1_r_rx_byte[4]))) # (!C1L73 & (C1_r_rx_data)))) # (!C1L1 & (((C1_r_rx_byte[4]))));


--C1L5 is uart_rx:receiver|Decoder0~4
C1L5 = (C1_r_bit_index[0] & (!C1_r_bit_index[1] & (C1_r_bit_index[2] & C1L1)));


--C1L76 is uart_rx:receiver|r_rx_byte[5]~7
C1L76 = (C1L5 & (C1_r_rx_data)) # (!C1L5 & ((C1_r_rx_byte[5])));


--C1L6 is uart_rx:receiver|Decoder0~5
C1L6 = (!C1_r_bit_index[0] & (C1_r_bit_index[1] & (C1_r_bit_index[2] & C1L1)));


--C1L78 is uart_rx:receiver|r_rx_byte[6]~8
C1L78 = (C1L6 & (C1_r_rx_data)) # (!C1L6 & ((C1_r_rx_byte[6])));


--C1L80 is uart_rx:receiver|r_rx_byte[7]~9
C1L80 = ((!C1_r_bit_index[2]) # (!C1_r_bit_index[1])) # (!C1_r_bit_index[0]);


--C1L81 is uart_rx:receiver|r_rx_byte[7]~10
C1L81 = (C1L1 & ((C1L80 & ((C1_r_rx_byte[7]))) # (!C1L80 & (C1_r_rx_data)))) # (!C1L1 & (((C1_r_rx_byte[7]))));


--C1L102 is uart_rx:receiver|Selector17~0
C1L102 = (!C1_r_sm_main.s_cleanup & (((!C1L50 & C1_r_sm_main.s_idle)) # (!C1_r_rx_data)));


--C1_r_rx_data_r is uart_rx:receiver|r_rx_data_r
--register power-up is low

C1_r_rx_data_r = DFFEAS(i_rx_serial, i_clk,  ,  ,  ,  ,  ,  ,  );


--C1L101 is uart_rx:receiver|Selector16~0
C1L101 = (C1_r_sm_main.s_rx_data_bits & (C1_r_bit_index[0] $ (((C1L13))))) # (!C1_r_sm_main.s_rx_data_bits & (C1_r_bit_index[0] & (C1_r_sm_main.s_idle)));


--C1L99 is uart_rx:receiver|Selector15~2
C1L99 = (C1_r_sm_main.s_rx_data_bits & (C1_r_bit_index[1] $ (((C1L13 & C1_r_bit_index[0])))));


--C1L95 is uart_rx:receiver|Selector14~0
C1L95 = (C1_r_sm_main.s_idle & !C1_r_sm_main.s_rx_data_bits);


--C1L96 is uart_rx:receiver|Selector14~1
C1L96 = (C1_r_bit_index[0] & (C1L1 & (C1_r_bit_index[1] $ (C1_r_bit_index[2]))));


--C1L97 is uart_rx:receiver|Selector14~2
C1L97 = (C1_r_sm_main.s_rx_data_bits & (C1_r_bit_index[2] & ((!C1_r_bit_index[0]) # (!C1L13))));


--C1L98 is uart_rx:receiver|Selector14~3
C1L98 = (C1L96) # ((C1L97) # ((C1_r_bit_index[2] & C1L95)));


--i_rx_serial is i_rx_serial
i_rx_serial = INPUT();


--D1L77 is uart_tx:transmitter|Selector1~4
D1L77 = ((D1_r_sm_main.s_tx_data_bits & (D1_r_bit_index[2] & D1L6))) # (!D1_r_sm_main.s_idle);


--A1L105 is r_fifo_data_in[6]~16
A1L105 = (r_sm_main.s_get_fifo_data & ((i_rst & (B1L60)) # (!i_rst & ((r_fifo_data_in[6]))))) # (!r_sm_main.s_get_fifo_data & (((r_fifo_data_in[6]))));


--A1L107 is r_fifo_data_in[7]~17
A1L107 = (r_sm_main.s_get_fifo_data & ((i_rst & (B1L61)) # (!i_rst & ((r_fifo_data_in[7]))))) # (!r_sm_main.s_get_fifo_data & (((r_fifo_data_in[7]))));


--A1L103 is r_fifo_data_in[5]~18
A1L103 = (r_sm_main.s_get_fifo_data & ((i_rst & (B1L59)) # (!i_rst & ((r_fifo_data_in[5]))))) # (!r_sm_main.s_get_fifo_data & (((r_fifo_data_in[5]))));


--A1L101 is r_fifo_data_in[4]~19
A1L101 = (r_sm_main.s_get_fifo_data & ((i_rst & (B1L58)) # (!i_rst & ((r_fifo_data_in[4]))))) # (!r_sm_main.s_get_fifo_data & (((r_fifo_data_in[4]))));


--A1L99 is r_fifo_data_in[3]~20
A1L99 = (r_sm_main.s_get_fifo_data & ((i_rst & (B1L57)) # (!i_rst & ((r_fifo_data_in[3]))))) # (!r_sm_main.s_get_fifo_data & (((r_fifo_data_in[3]))));


--A1L97 is r_fifo_data_in[2]~21
A1L97 = (r_sm_main.s_get_fifo_data & ((i_rst & (B1L56)) # (!i_rst & ((r_fifo_data_in[2]))))) # (!r_sm_main.s_get_fifo_data & (((r_fifo_data_in[2]))));


--A1L95 is r_fifo_data_in[1]~22
A1L95 = (r_sm_main.s_get_fifo_data & ((i_rst & (B1L55)) # (!i_rst & ((r_fifo_data_in[1]))))) # (!r_sm_main.s_get_fifo_data & (((r_fifo_data_in[1]))));


--A1L93 is r_fifo_data_in[0]~23
A1L93 = (r_sm_main.s_get_fifo_data & ((i_rst & (B1L54)) # (!i_rst & ((r_fifo_data_in[0]))))) # (!r_sm_main.s_get_fifo_data & (((r_fifo_data_in[0]))));


--C1L100 is uart_rx:receiver|Selector15~3
C1L100 = (C1L99) # ((C1_r_sm_main.s_idle & (!C1_r_sm_main.s_rx_data_bits & C1_r_bit_index[1])));


--D1L80 is uart_tx:transmitter|Selector16~0
D1L80 = (D1_r_sm_main.s_tx_data_bits & (!D1L4 & (D1_r_bit_index[0]))) # (!D1_r_sm_main.s_tx_data_bits & (((D1_r_sm_main.s_idle))));


--D1L81 is uart_tx:transmitter|Selector16~1
D1L81 = (D1_r_sm_main.s_tx_data_bits & (D1_r_bit_index[2] $ (((D1L80 & D1_r_bit_index[1]))))) # (!D1_r_sm_main.s_tx_data_bits & (D1L80 & ((D1_r_bit_index[2]))));


--C1L12 is uart_rx:receiver|LessThan1~1
C1L12 = (C1_r_clk_count[9]) # ((C1_r_clk_count[8]) # ((C1_r_clk_count[7]) # (!C1L11)));


--C1L13 is uart_rx:receiver|LessThan1~2
C1L13 = (C1_r_clk_count[12] & ((C1_r_clk_count[11]) # ((C1_r_clk_count[10] & C1L12))));


--A1L128 is r_status[1]~0
A1L128 = !r_sm_main.s_get_fifo_data;


--A1L163 is ~GND
A1L163 = GND;


--B2L5 is fifo:fifo_tx|Equal2~0_wirecell
B2L5 = !B2L4;


--A1L126 is r_status[0]~_wirecell
A1L126 = !r_status[0];


--A1L129 is r_status[1]~_wirecell
A1L129 = !r_status[1];


--A1L131 is r_status[2]~_wirecell
A1L131 = !r_status[2];


--A1L133 is r_status[3]~_wirecell
A1L133 = !r_status[3];


