"""
***
* This py code reads the .pickle generated by Matlab and converts
* it to a .txt format, enabling it to be read by VHDL simulation.
***
"""
import numpy as np
import scipy.io
import matplotlib.pyplot as plt
import os
from os.path import join
import pathlib
from fxpmath import Fxp

info = {'BPSK': 'signal_bpsk',
        'QPSK': 'signal_qpsk',
        'PSK8': 'signal_8psk',
        'QAM16': 'signal_qam16',
        'QAM64': 'signal_qam64',
        'noise': 'signal_noise'}

modulations = ['BPSK', 'QPSK', 'PSK8', 'QAM16', 'noise']
snr_array = [-10]#, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
frames = 1
frame_size = 2048
out_folder =  pathlib.Path(join(os.getcwd(), 'txt'))
fxp_bits = 16
fxp_frac = 11

for mod in modulations:
    data_mat = scipy.io.loadmat(mod + '.mat')
    parsed_signal = data_mat[info[mod]]

    with open(join(out_folder, mod + '_bin.txt'), 'a') as f_bin:
        with open(join(out_folder, mod + '_float.txt'), 'a') as f_float:
            for snr in range(len(snr_array)):
                for frame in range(frames):
                    signal = parsed_signal[snr, frame, 0:frame_size]
                    for r in signal:
                        signal_real = np.real(r)
                        signal_img  = np.imag(r)

                        f_float.write(str(signal_real) + ' ')
                        f_float.write(str(signal_img) + '\n')

                        f_bin.write(str(Fxp(signal_real, True, fxp_bits, fxp_frac).bin()) + ' ')
                        f_bin.write(str(Fxp(signal_img, True, fxp_bits, fxp_frac).bin()) + '\n')
                    
                    #DEV TEST PURPOSE ONLY
                    absolute = []
                    for i in range(2048):
                        signal_real = np.real(signal[i])
                        signal_img = np.imag(signal[i])
                        absolute.append((signal_real**2) + (signal_img**2))
                    #print(absolute)
                    absolute_bin = [Fxp(i, True, 16, 11).bin() for i in absolute]
                    #print(absolute_bin)
                    print("mean: " + str(np.mean(absolute)))
                    print("mean bin:" + str(Fxp(np.mean(absolute), True, 16, 11).bin()))
                    std = sum((absolute - np.mean(absolute))**2)/(len(absolute)-1)
                    print("std:" + str(std))
                    print("std bin:" + str(Fxp(std, True, 16, 11).bin()))
